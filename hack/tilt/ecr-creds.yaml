apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: container-registry
    app.kubernetes.io/instance: holos-system-ecr
    app.kubernetes.io/name: holos-system-ecr
    app.kubernetes.io/part-of: holos
  name: holos-system-ecr
  namespace: holos-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: container-registry
    app.kubernetes.io/instance: holos-system-ecr
    app.kubernetes.io/name: holos-system-ecr
    app.kubernetes.io/part-of: holos
  name: holos-system-ecr
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - namespaces
  verbs:
  - list
- apiGroups:
  - ""
  resourceNames:
  - holos-system-ecr-image-pull-creds
  resources:
  - secrets
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: container-registry
    app.kubernetes.io/instance: holos-system-ecr
    app.kubernetes.io/name: holos-system-ecr
    app.kubernetes.io/part-of: holos
  name: holos-system-ecr
  namespace: holos-system
roleRef:
  kind: ClusterRole
  name: holos-system-ecr
subjects:
- kind: ServiceAccount
  name: holos-system-ecr
  namespace: holos-system
---
apiVersion: v1
data:
  refresh.sh: |-
    #! /bin/bash
    tmpdir="$(mktemp -d)"
    finish() {
      rm -rf "${tmpdir}"
    }
    trap finish EXIT
    set -euo pipefail
    aws sts assume-role-with-web-identity \
      --role-arn ${AWS_ROLE_ARN} \
      --role-session-name CronJob \
      --web-identity-token file:///run/secrets/irsa/serviceaccount/token \
        > "${tmpdir}/creds.json"
    export AWS_ACCESS_KEY_ID=$(jq -r .Credentials.AccessKeyId "${tmpdir}/creds.json")
    export AWS_SECRET_ACCESS_KEY=$(jq -r .Credentials.SecretAccessKey "${tmpdir}/creds.json")
    export AWS_SESSION_TOKEN=$(jq -r .Credentials.SessionToken "${tmpdir}/creds.json")
    set -x
    aws ecr get-login-password --region ${AWS_REGION} \
      | docker login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com
    kubectl create secret docker-registry 'holos-system-ecr-image-pull-creds' \
      --from-file=.dockerconfigjson=${HOME}/.docker/config.json \
      --dry-run=client -o yaml \
        > "${tmpdir}/secret.yaml"
    # Get namespaces one per line
    kubectl -o=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' get namespaces > ${tmpdir}/namespaces.txt
    # Copy the secret to all namespaces
    for ns in $(grep -vE '^gke-|^kube-|^gmp-' ${tmpdir}/namespaces.txt); do
      echo "---" >> "${tmpdir}/secretlist.yaml"
      kubectl --dry-run=client -o yaml -n $ns apply -f "${tmpdir}/secret.yaml" >> "${tmpdir}/secretlist.yaml"
    done
    kubectl apply --server-side=true -f "${tmpdir}/secretlist.yaml"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: image-pull-secret
    app.kubernetes.io/instance: holos-system-ecr
    app.kubernetes.io/name: refresher
    app.kubernetes.io/part-of: holos
  name: holos-system-ecr
  namespace: holos-system
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/component: container-registry
    app.kubernetes.io/instance: holos-system-ecr
    app.kubernetes.io/name: holos-system-ecr
    app.kubernetes.io/part-of: holos
  name: holos-system-ecr
  namespace: holos-system
spec:
  schedule: 0 */4 * * *
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - command:
            - bash
            - /app/scripts/refresh.sh
            env:
            - name: AWS_ACCOUNT
              value: "271053619184"
            - name: AWS_REGION
              value: us-east-2
            - name: AWS_ROLE_ARN
              value: arn:aws:iam::271053619184:role/ImagePull
            image: quay.io/holos/toolkit:latest
            imagePullPolicy: Always
            name: toolkit
            resources:
              limits:
                cpu: 50m
                memory: 64Mi
              requests:
                cpu: 50m
                memory: 64Mi
            volumeMounts:
            - mountPath: /app/scripts
              name: scripts
            - mountPath: /run/secrets/irsa/serviceaccount
              name: irsa
          restartPolicy: OnFailure
          serviceAccountName: holos-system-ecr
          volumes:
          - configMap:
              name: holos-system-ecr
            name: scripts
          - name: irsa
            projected:
              sources:
              - serviceAccountToken:
                  path: "token"
                  audience: "irsa"
                  expirationSeconds: 3600
