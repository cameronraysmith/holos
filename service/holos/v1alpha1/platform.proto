syntax = "proto3";

package holos.v1alpha1;

option go_package = "github.com/holos-run/holos/service/gen/holos/v1alpha1;holos";

// git clone https://github.com/bufbuild/protovalidate then add <parent>/protovalidate/proto/protovalidate to your editor proto search path
import "buf/validate/validate.proto";
import "holos/v1alpha1/timestamps.proto";
import "holos/v1alpha1/organization.proto";
import "holos/v1alpha1/user.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// For validation, see the [Standard constraints](https://github.com/bufbuild/protovalidate/blob/main/docs/standard-constraints.md)

// RawConfig represents the raw form configuration as opaque bytes.  Used for input.
message RawConfig {
  bytes form = 1;
  bytes values = 2;
  bytes cue = 3;
  string definition = 4;
}

message Config {
  PlatformForm form = 1;
  // Values are the user supplied config values organized by section.
  UserDefinedConfig values = 2;
}

message PlatformConfig {
  PlatformStruct platform = 1;
}

// PlatformConfig represents the platform config struct.  The JSON encoding of this message is directly usable in CUE.
// TODO: consolidate PlatformStruct and Platform into one message type representing a Platform resource.
message PlatformStruct {
  PlatformSpec spec = 1;
}

message PlatformSpec {
  PlatformSpecConfig config = 1;
}

message PlatformSpecConfig {
  UserDefinedConfig user = 1;
}

// UserDefinedConfig represents user defined configuration values.
message UserDefinedConfig {
  map<string, UserDefinedSection> sections = 1;
}

// UserDefinedSection represents a user defined config section.
message UserDefinedSection {
  map<string, google.protobuf.Value> fields = 1;
}

message Platform {
  // Unique id assigned by the server.
  string id = 1;
  Timestamps timestamps = 2;

  // Organization ID resource owner.
  string org_id = 3 [(buf.validate.field).string.uuid = true];
  // name is the platform short name as a dns label.
  string name = 4 [(buf.validate.field).string.max_len = 100];
  string display_name = 5 [(buf.validate.field).string.max_len = 100];
  Creator creator = 6;

  // config represents the platform config form and values.  Read only.
  Config config = 7;
  // raw_config represents the platform config form and values.  Write only.
  RawConfig raw_config = 8;
}

// TODO: add a metadata message to make it easier for the client to adapt the
// FieldConfigs into an es FormlyFieldConfig[].
// TODO: rename fieldConfigs to fields to align with how it's used everywhere
// else and with the formly documentation.
message ConfigFormSection {
  string name = 1;
  string displayName = 2;
  string description = 3;

  // NOTE: On the wire, carry any JSON as field configs for expedience.  I
  // attempted to reflect FormlyFieldConfig in protobuf, but it was too time
  // consuming.  The loosely defined Formly json data API creates significant
  // friction when joined with a well defined protobuf API.  Therefore, we do
  // not specify anything about the Forms API, convey any valid JSON, and leave
  // it up to CUE and Formly on the sending and receiving side of the API.
  //
  // We use CUE to define our own holos form elements as a subset of the loose
  // Formly definitions.  We further hope Formly will move toward a better JSON
  // data API, but it's unlikely.  Consider replacing Formly entirely and
  // building on top of the strongly typed Angular Dyanmic Forms API.
  //
  // Refer to: https://github.com/ngx-formly/ngx-formly/blob/v6.3.0/src/core/src/lib/models/fieldconfig.ts#L15
  // Consider: https://angular.io/guide/dynamic-form
  repeated google.protobuf.Value fieldConfigs = 4;
}

message PlatformFormSpec {
  repeated ConfigFormSection sections = 1;
}

message GetPlatformsRequest {
  string org_id = 1 [(buf.validate.field).string.uuid = true];
}

message GetPlatformsResponse {
  repeated Platform platforms = 1;
}

message GetPlatformResponse {
  Platform platform = 1;
}

message AddPlatformRequest {
  Platform platform = 1;
}

message GetPlatformRequest {
  string platform_id = 1 [(buf.validate.field).string.uuid = true];
}

message MetadataName {
  string name = 1;
}

message PlatformForm {
  string apiVersion = 1;
  string kind = 2;
  MetadataName metadata = 3;
  PlatformFormSpec spec = 4;
}

message PutPlatformConfigRequest {
  string platform_id = 1 [(buf.validate.field).string.uuid = true];
  UserDefinedConfig values = 2;
}

message GetPlatformConfigRequest {
  string platform_id = 1 [(buf.validate.field).string.uuid = true];
}

service PlatformService {
  rpc AddPlatform(AddPlatformRequest) returns (GetPlatformsResponse) {}
  rpc GetPlatforms(GetPlatformsRequest) returns (GetPlatformsResponse) {}
  rpc GetPlatform(GetPlatformRequest) returns (GetPlatformResponse) {}
  rpc PutPlatformConfig(PutPlatformConfigRequest) returns (GetPlatformResponse) {}
  // GetConfig provides the unmarshalled config values for use with CUE
  rpc GetConfig(GetPlatformConfigRequest) returns (PlatformConfig) {}
}
