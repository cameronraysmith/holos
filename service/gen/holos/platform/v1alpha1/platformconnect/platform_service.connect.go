// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: holos/platform/v1alpha1/platform_service.proto

package platformconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/holos-run/holos/service/gen/holos/platform/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PlatformServiceName is the fully-qualified name of the PlatformService service.
	PlatformServiceName = "holos.platform.v1alpha1.PlatformService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlatformServiceCreatePlatformProcedure is the fully-qualified name of the PlatformService's
	// CreatePlatform RPC.
	PlatformServiceCreatePlatformProcedure = "/holos.platform.v1alpha1.PlatformService/CreatePlatform"
	// PlatformServiceGetPlatformProcedure is the fully-qualified name of the PlatformService's
	// GetPlatform RPC.
	PlatformServiceGetPlatformProcedure = "/holos.platform.v1alpha1.PlatformService/GetPlatform"
	// PlatformServiceUpdatePlatformProcedure is the fully-qualified name of the PlatformService's
	// UpdatePlatform RPC.
	PlatformServiceUpdatePlatformProcedure = "/holos.platform.v1alpha1.PlatformService/UpdatePlatform"
	// PlatformServiceListPlatformsProcedure is the fully-qualified name of the PlatformService's
	// ListPlatforms RPC.
	PlatformServiceListPlatformsProcedure = "/holos.platform.v1alpha1.PlatformService/ListPlatforms"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	platformServiceServiceDescriptor              = v1alpha1.File_holos_platform_v1alpha1_platform_service_proto.Services().ByName("PlatformService")
	platformServiceCreatePlatformMethodDescriptor = platformServiceServiceDescriptor.Methods().ByName("CreatePlatform")
	platformServiceGetPlatformMethodDescriptor    = platformServiceServiceDescriptor.Methods().ByName("GetPlatform")
	platformServiceUpdatePlatformMethodDescriptor = platformServiceServiceDescriptor.Methods().ByName("UpdatePlatform")
	platformServiceListPlatformsMethodDescriptor  = platformServiceServiceDescriptor.Methods().ByName("ListPlatforms")
)

// PlatformServiceClient is a client for the holos.platform.v1alpha1.PlatformService service.
type PlatformServiceClient interface {
	CreatePlatform(context.Context, *connect.Request[v1alpha1.CreatePlatformRequest]) (*connect.Response[v1alpha1.CreatePlatformResponse], error)
	GetPlatform(context.Context, *connect.Request[v1alpha1.GetPlatformRequest]) (*connect.Response[v1alpha1.GetPlatformResponse], error)
	UpdatePlatform(context.Context, *connect.Request[v1alpha1.UpdatePlatformRequest]) (*connect.Response[v1alpha1.UpdatePlatformResponse], error)
	ListPlatforms(context.Context, *connect.Request[v1alpha1.ListPlatformsRequest]) (*connect.Response[v1alpha1.ListPlatformsResponse], error)
}

// NewPlatformServiceClient constructs a client for the holos.platform.v1alpha1.PlatformService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlatformServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PlatformServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &platformServiceClient{
		createPlatform: connect.NewClient[v1alpha1.CreatePlatformRequest, v1alpha1.CreatePlatformResponse](
			httpClient,
			baseURL+PlatformServiceCreatePlatformProcedure,
			connect.WithSchema(platformServiceCreatePlatformMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPlatform: connect.NewClient[v1alpha1.GetPlatformRequest, v1alpha1.GetPlatformResponse](
			httpClient,
			baseURL+PlatformServiceGetPlatformProcedure,
			connect.WithSchema(platformServiceGetPlatformMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePlatform: connect.NewClient[v1alpha1.UpdatePlatformRequest, v1alpha1.UpdatePlatformResponse](
			httpClient,
			baseURL+PlatformServiceUpdatePlatformProcedure,
			connect.WithSchema(platformServiceUpdatePlatformMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPlatforms: connect.NewClient[v1alpha1.ListPlatformsRequest, v1alpha1.ListPlatformsResponse](
			httpClient,
			baseURL+PlatformServiceListPlatformsProcedure,
			connect.WithSchema(platformServiceListPlatformsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// platformServiceClient implements PlatformServiceClient.
type platformServiceClient struct {
	createPlatform *connect.Client[v1alpha1.CreatePlatformRequest, v1alpha1.CreatePlatformResponse]
	getPlatform    *connect.Client[v1alpha1.GetPlatformRequest, v1alpha1.GetPlatformResponse]
	updatePlatform *connect.Client[v1alpha1.UpdatePlatformRequest, v1alpha1.UpdatePlatformResponse]
	listPlatforms  *connect.Client[v1alpha1.ListPlatformsRequest, v1alpha1.ListPlatformsResponse]
}

// CreatePlatform calls holos.platform.v1alpha1.PlatformService.CreatePlatform.
func (c *platformServiceClient) CreatePlatform(ctx context.Context, req *connect.Request[v1alpha1.CreatePlatformRequest]) (*connect.Response[v1alpha1.CreatePlatformResponse], error) {
	return c.createPlatform.CallUnary(ctx, req)
}

// GetPlatform calls holos.platform.v1alpha1.PlatformService.GetPlatform.
func (c *platformServiceClient) GetPlatform(ctx context.Context, req *connect.Request[v1alpha1.GetPlatformRequest]) (*connect.Response[v1alpha1.GetPlatformResponse], error) {
	return c.getPlatform.CallUnary(ctx, req)
}

// UpdatePlatform calls holos.platform.v1alpha1.PlatformService.UpdatePlatform.
func (c *platformServiceClient) UpdatePlatform(ctx context.Context, req *connect.Request[v1alpha1.UpdatePlatformRequest]) (*connect.Response[v1alpha1.UpdatePlatformResponse], error) {
	return c.updatePlatform.CallUnary(ctx, req)
}

// ListPlatforms calls holos.platform.v1alpha1.PlatformService.ListPlatforms.
func (c *platformServiceClient) ListPlatforms(ctx context.Context, req *connect.Request[v1alpha1.ListPlatformsRequest]) (*connect.Response[v1alpha1.ListPlatformsResponse], error) {
	return c.listPlatforms.CallUnary(ctx, req)
}

// PlatformServiceHandler is an implementation of the holos.platform.v1alpha1.PlatformService
// service.
type PlatformServiceHandler interface {
	CreatePlatform(context.Context, *connect.Request[v1alpha1.CreatePlatformRequest]) (*connect.Response[v1alpha1.CreatePlatformResponse], error)
	GetPlatform(context.Context, *connect.Request[v1alpha1.GetPlatformRequest]) (*connect.Response[v1alpha1.GetPlatformResponse], error)
	UpdatePlatform(context.Context, *connect.Request[v1alpha1.UpdatePlatformRequest]) (*connect.Response[v1alpha1.UpdatePlatformResponse], error)
	ListPlatforms(context.Context, *connect.Request[v1alpha1.ListPlatformsRequest]) (*connect.Response[v1alpha1.ListPlatformsResponse], error)
}

// NewPlatformServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlatformServiceHandler(svc PlatformServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	platformServiceCreatePlatformHandler := connect.NewUnaryHandler(
		PlatformServiceCreatePlatformProcedure,
		svc.CreatePlatform,
		connect.WithSchema(platformServiceCreatePlatformMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceGetPlatformHandler := connect.NewUnaryHandler(
		PlatformServiceGetPlatformProcedure,
		svc.GetPlatform,
		connect.WithSchema(platformServiceGetPlatformMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceUpdatePlatformHandler := connect.NewUnaryHandler(
		PlatformServiceUpdatePlatformProcedure,
		svc.UpdatePlatform,
		connect.WithSchema(platformServiceUpdatePlatformMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceListPlatformsHandler := connect.NewUnaryHandler(
		PlatformServiceListPlatformsProcedure,
		svc.ListPlatforms,
		connect.WithSchema(platformServiceListPlatformsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/holos.platform.v1alpha1.PlatformService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlatformServiceCreatePlatformProcedure:
			platformServiceCreatePlatformHandler.ServeHTTP(w, r)
		case PlatformServiceGetPlatformProcedure:
			platformServiceGetPlatformHandler.ServeHTTP(w, r)
		case PlatformServiceUpdatePlatformProcedure:
			platformServiceUpdatePlatformHandler.ServeHTTP(w, r)
		case PlatformServiceListPlatformsProcedure:
			platformServiceListPlatformsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlatformServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPlatformServiceHandler struct{}

func (UnimplementedPlatformServiceHandler) CreatePlatform(context.Context, *connect.Request[v1alpha1.CreatePlatformRequest]) (*connect.Response[v1alpha1.CreatePlatformResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("holos.platform.v1alpha1.PlatformService.CreatePlatform is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetPlatform(context.Context, *connect.Request[v1alpha1.GetPlatformRequest]) (*connect.Response[v1alpha1.GetPlatformResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("holos.platform.v1alpha1.PlatformService.GetPlatform is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdatePlatform(context.Context, *connect.Request[v1alpha1.UpdatePlatformRequest]) (*connect.Response[v1alpha1.UpdatePlatformResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("holos.platform.v1alpha1.PlatformService.UpdatePlatform is not implemented"))
}

func (UnimplementedPlatformServiceHandler) ListPlatforms(context.Context, *connect.Request[v1alpha1.ListPlatformsRequest]) (*connect.Response[v1alpha1.ListPlatformsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("holos.platform.v1alpha1.PlatformService.ListPlatforms is not implemented"))
}
