// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: holos/system/v1alpha1/system_service.proto

package systemconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/holos-run/holos/service/gen/holos/system/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SystemServiceName is the fully-qualified name of the SystemService service.
	SystemServiceName = "holos.system.v1alpha1.SystemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SystemServiceSeedDatabaseProcedure is the fully-qualified name of the SystemService's
	// SeedDatabase RPC.
	SystemServiceSeedDatabaseProcedure = "/holos.system.v1alpha1.SystemService/SeedDatabase"
	// SystemServiceDropTablesProcedure is the fully-qualified name of the SystemService's DropTables
	// RPC.
	SystemServiceDropTablesProcedure = "/holos.system.v1alpha1.SystemService/DropTables"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	systemServiceServiceDescriptor            = v1alpha1.File_holos_system_v1alpha1_system_service_proto.Services().ByName("SystemService")
	systemServiceSeedDatabaseMethodDescriptor = systemServiceServiceDescriptor.Methods().ByName("SeedDatabase")
	systemServiceDropTablesMethodDescriptor   = systemServiceServiceDescriptor.Methods().ByName("DropTables")
)

// SystemServiceClient is a client for the holos.system.v1alpha1.SystemService service.
type SystemServiceClient interface {
	SeedDatabase(context.Context, *connect.Request[v1alpha1.SeedDatabaseRequest]) (*connect.Response[v1alpha1.SeedDatabaseResponse], error)
	DropTables(context.Context, *connect.Request[v1alpha1.DropTablesRequest]) (*connect.Response[v1alpha1.DropTablesResponse], error)
}

// NewSystemServiceClient constructs a client for the holos.system.v1alpha1.SystemService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSystemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &systemServiceClient{
		seedDatabase: connect.NewClient[v1alpha1.SeedDatabaseRequest, v1alpha1.SeedDatabaseResponse](
			httpClient,
			baseURL+SystemServiceSeedDatabaseProcedure,
			connect.WithSchema(systemServiceSeedDatabaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dropTables: connect.NewClient[v1alpha1.DropTablesRequest, v1alpha1.DropTablesResponse](
			httpClient,
			baseURL+SystemServiceDropTablesProcedure,
			connect.WithSchema(systemServiceDropTablesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// systemServiceClient implements SystemServiceClient.
type systemServiceClient struct {
	seedDatabase *connect.Client[v1alpha1.SeedDatabaseRequest, v1alpha1.SeedDatabaseResponse]
	dropTables   *connect.Client[v1alpha1.DropTablesRequest, v1alpha1.DropTablesResponse]
}

// SeedDatabase calls holos.system.v1alpha1.SystemService.SeedDatabase.
func (c *systemServiceClient) SeedDatabase(ctx context.Context, req *connect.Request[v1alpha1.SeedDatabaseRequest]) (*connect.Response[v1alpha1.SeedDatabaseResponse], error) {
	return c.seedDatabase.CallUnary(ctx, req)
}

// DropTables calls holos.system.v1alpha1.SystemService.DropTables.
func (c *systemServiceClient) DropTables(ctx context.Context, req *connect.Request[v1alpha1.DropTablesRequest]) (*connect.Response[v1alpha1.DropTablesResponse], error) {
	return c.dropTables.CallUnary(ctx, req)
}

// SystemServiceHandler is an implementation of the holos.system.v1alpha1.SystemService service.
type SystemServiceHandler interface {
	SeedDatabase(context.Context, *connect.Request[v1alpha1.SeedDatabaseRequest]) (*connect.Response[v1alpha1.SeedDatabaseResponse], error)
	DropTables(context.Context, *connect.Request[v1alpha1.DropTablesRequest]) (*connect.Response[v1alpha1.DropTablesResponse], error)
}

// NewSystemServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSystemServiceHandler(svc SystemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	systemServiceSeedDatabaseHandler := connect.NewUnaryHandler(
		SystemServiceSeedDatabaseProcedure,
		svc.SeedDatabase,
		connect.WithSchema(systemServiceSeedDatabaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	systemServiceDropTablesHandler := connect.NewUnaryHandler(
		SystemServiceDropTablesProcedure,
		svc.DropTables,
		connect.WithSchema(systemServiceDropTablesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/holos.system.v1alpha1.SystemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SystemServiceSeedDatabaseProcedure:
			systemServiceSeedDatabaseHandler.ServeHTTP(w, r)
		case SystemServiceDropTablesProcedure:
			systemServiceDropTablesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSystemServiceHandler struct{}

func (UnimplementedSystemServiceHandler) SeedDatabase(context.Context, *connect.Request[v1alpha1.SeedDatabaseRequest]) (*connect.Response[v1alpha1.SeedDatabaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("holos.system.v1alpha1.SystemService.SeedDatabase is not implemented"))
}

func (UnimplementedSystemServiceHandler) DropTables(context.Context, *connect.Request[v1alpha1.DropTablesRequest]) (*connect.Response[v1alpha1.DropTablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("holos.system.v1alpha1.SystemService.DropTables is not implemented"))
}
