# Work in the root of the example repo
cd ../script-01-clone/multi-sources-example
env HOME=$WORK/.tmp
chmod 0755 $WORK/update.sh

# 987df87 add platform components to replace ApplicationSets.spec.generators
exec cat $WORK/platform-my-chart-header.sh $WORK/platform-my-chart.cue $WORK/platform-my-chart-trailer.sh
stdin stdout
exec bash -xeuo pipefail
exec diff platform/my-chart.cue $WORK/platform-my-chart.cue

# Configure where manifests are written.
exec cat $WORK/componentconfig-header.sh $WORK/componentconfig.cue $WORK/componentconfig-trailer.sh
stdin stdout
exec bash -xeuo pipefail
exec diff components/componentconfig.cue $WORK/componentconfig.cue

# Show the platform
exec bash -c 'bash -euo pipefail $WORK/holos-show-platform.sh 2>&1'
cp stdout $WORK/holos-show-platform.txt

# Component Definition
exec cat $WORK/component-my-chart-header.sh $WORK/component-my-chart.cue $WORK/component-my-chart-trailer.sh
stdin stdout
exec bash -xeuo pipefail
exec diff components/my-chart/my-chart.cue $WORK/component-my-chart.cue

# Show the BuildPlans
exec bash -c 'bash -euo pipefail $WORK/show-buildplans.sh 2>&1'
cp stdout $WORK/show-buildplans.txt

# Inspect the values
exec bash -c 'bash -euo pipefail $WORK/inspect-value-files.sh 2>&1'
cp stdout $WORK/inspect-value-files.txt

# Render the platform, capture stdout, and use update.sh to gate whether the
# output file should be updated.
exec bash -c 'bash -euo pipefail $WORK/render.sh 2>&1'
stdin stdout
exec $WORK/update.sh $WORK/render.txt

exec bash -c 'bash -euo pipefail $WORK/tree-deploy.sh 2>&1'
cp stdout $WORK/tree-deploy.txt

# Make a commit
exec git add .
exec git commit -m '04-helm-component.txtar'

-- tree-deploy.sh --
tree deploy
-- render.sh --
holos render platform
-- update.sh --
#! /bin/bash
set -euo pipefail
[[ -s "$1" ]] && [[ -z "${HOLOS_UPDATE_SCRIPTS:-}" ]] && exit 0
cat > "$1"
-- show-buildplans.sh --
holos show buildplans
-- inspect-value-files.sh --
 CUE_EXPERIMENT=embed holos cue export --out=yaml \
   ./components/my-chart \
   -e valueFiles 
-- component-my-chart-header.sh --
cat <<'EOF' > components/my-chart/my-chart.cue
-- component-my-chart-trailer.sh --
EOF
-- component-my-chart.cue --
@extern(embed)
package holos

import "holos.example/config/environments"

parameters: {
	environments.#Config & {
		env:     _ @tag(env)
		region:  _ @tag(region)
		type:    _ @tag(type)
		version: _ @tag(version)
		chart:   _ @tag(chart)
	}
}

// component represents the holos component definition, which produces a
// BuildPlan for holos to execute, rendering the manifests.
component: #Helm & {
	Chart: {
		// Migrated from https://github.com/holos-run/multi-sources-example/blob/v0.1.0/appsets/4-final/all-my-envs-appset-with-version.yaml#L25
		version: parameters.chart
		repository: {
			name: "multi-sources-example"
			// Migrated from https://github.com/holos-run/multi-sources-example/blob/v0.1.0/appsets/4-final/all-my-envs-appset-with-version.yaml#L23
			url: "https://kostis-codefresh.github.io/multi-sources-example"
		}
	}

	// Migrated from https://github.com/holos-run/multi-sources-example/blob/v0.1.0/appsets/4-final/all-my-envs-appset-with-version.yaml#L40
	// We use kustomize to manage the namespace, similar to how the original
	// article uses the ApplicationSet template to specify the namespace.
	KustomizeConfig: Kustomization: namespace: parameters.env

	// Migrate the Helm Hierarchy preserving the behavior of over writing values.
	// Migrated from [valueFiles].  Later files win.
	//
	// [valueFiles]: https://github.com/holos-run/multi-sources-example/blob/v0.1.0/appsets/4-final/all-my-envs-appset-with-version.yaml#L27-L32
	ValueFiles: [{
		name:   "common-values.yaml"
		values: valueFiles["my-values/common-values.yaml"]
	}, {
		name:   "version-values.yaml"
		values: valueFiles["my-values/app-version/\(parameters.version)-values.yaml"]
	}, {
		name:   "type-values.yaml"
		values: valueFiles["my-values/env-type/\(parameters.type)-values.yaml"]
	}, {
		name:   "region-values.yaml"
		values: valueFiles["my-values/regions/\(parameters.region)-values.yaml"]
	}, {
		name:   "env-values.yaml"
		values: valueFiles["my-values/envs/\(parameters.env)-values.yaml"]
	}]
}

// holos represents the output for the holos command line to process.  The holos
// command line processes a BuildPlan to render the helm chart component.
//
// Use the holos show buildplans command to see the BuildPlans that holos render
// platform renders.
holos: component.BuildPlan

// Migrated from https://github.com/holos-run/multi-sources-example/blob/v0.1.0/appsets/4-final/all-my-envs-appset-with-version.yaml#L27-L32
valueFiles: _ @embed(glob=my-values/*.yaml)
valueFiles: _ @embed(glob=my-values/*/*-values.yaml)
-- holos-show-platform.sh --
holos show platform
-- componentconfig-header.sh --
cat <<'EOF' > components/componentconfig.cue
-- componentconfig-trailer.sh --
EOF
-- componentconfig.cue --
package holos

#ComponentConfig: {
	// Inject the output base directory from platform component parameters.
	OutputBaseDir: string | *"" @tag(outputBaseDir, type=string)
}
-- platform-my-chart-header.sh --
cat <<'EOF' > platform/my-chart.cue
-- platform-my-chart-trailer.sh --
EOF
-- platform-my-chart.cue --
package holos

// Imports ./config/environments/*.cue as the environments cue package.  The
// package exposes ./config/environments/**/config.json files via the
// environments.config struct
import "holos.example/config/environments"

// Manage my-chart for each of the three environments.  Platform components are
// rendered by the holos render platform command.
//
// Use the following command command to inspect the Platform spec holos render
// platform processes.
//
//  holos show platform
//
// CONFIG represents each migrated environments/**/config.json file.
for CONFIG in environments.config {
	// Add one holos component for each config.json file to the
	// Platform.spec.components list.
	Platform: Components: "\(CONFIG.env)-my-chart": #MyChart & {
		parameters: {
			env:     CONFIG.env
			region:  CONFIG.region
			type:    CONFIG.type
			version: CONFIG.version
			chart:   CONFIG.chart
		}
	}
}

// #MyChart defines a re-usable way to manage my-chart across qa, staging, and
// production.
#MyChart: {
	name: "my-chart"
	path: "components/my-chart"
	// CUE supports constraints, here we constrain environment to one of three
	// possible values.
	parameters: {
		// Embed the config.json schema (env, region, type, version, chart fields)
		environments.#Config

		// Define the env field here as any value (_) so we can refer to it.
		// Otherwise cue complains #MyChart.parameters.outputBaseDir: reference
		// "env" not found
		env: _
		// Write output manifests organized by environment env in this case refers
		// to the env field defined by environments.#Config
		outputBaseDir: "environments/\(env)"
	}
	// CUE supports string substitution.
	annotations: "app.holos.run/description": "my-chart \(parameters.chart) for environment \(parameters.env)"
	// Selector labels
	labels: env: parameters.env
}
