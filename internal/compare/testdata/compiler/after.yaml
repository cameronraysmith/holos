kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: kargo-stages
  labels:
    holos.run/component.name: kargo-stages
    holos.run/project.name: httpbin
    holos.run/stack.name: httpbin
  annotations:
    app.holos.run/description: kargo-stages for project httpbin
spec:
  artifacts:
    - artifact: projects/httpbin/components/kargo-stages/kargo-stages.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Stage:
              dev:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: dev
                  namespace: httpbin
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/httpbin/component/dev-httpbin
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/mccutchen/go-httpbin
                            path: ./src/deploy/projects/httpbin/components/dev-httpbin
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/dev-httpbin.gen.yaml
                            path: ./src/deploy/projects/httpbin/components/dev-httpbin
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/httpbin/component/dev-httpbin
                          uses: git-push
                        - config:
                            apps:
                              - name: httpbin-dev-httpbin
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: httpbin
                      sources:
                        direct: true
              prod-us-central:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: prod-us-central
                  namespace: httpbin
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/httpbin/component/prod-us-central-httpbin
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/mccutchen/go-httpbin
                            path: ./src/deploy/projects/httpbin/components/prod-us-central-httpbin
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/prod-us-central-httpbin.gen.yaml
                            path: ./src/deploy/projects/httpbin/components/prod-us-central-httpbin
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/httpbin/component/prod-us-central-httpbin
                          uses: git-push
                        - config:
                            apps:
                              - name: httpbin-prod-us-central-httpbin
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: httpbin
                      sources:
                        stages:
                          - uat
              prod-us-east:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: prod-us-east
                  namespace: httpbin
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/httpbin/component/prod-us-east-httpbin
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/mccutchen/go-httpbin
                            path: ./src/deploy/projects/httpbin/components/prod-us-east-httpbin
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/prod-us-east-httpbin.gen.yaml
                            path: ./src/deploy/projects/httpbin/components/prod-us-east-httpbin
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/httpbin/component/prod-us-east-httpbin
                          uses: git-push
                        - config:
                            apps:
                              - name: httpbin-prod-us-east-httpbin
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: httpbin
                      sources:
                        stages:
                          - uat
              prod-us-west:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: prod-us-west
                  namespace: httpbin
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/httpbin/component/prod-us-west-httpbin
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/mccutchen/go-httpbin
                            path: ./src/deploy/projects/httpbin/components/prod-us-west-httpbin
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/prod-us-west-httpbin.gen.yaml
                            path: ./src/deploy/projects/httpbin/components/prod-us-west-httpbin
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/httpbin/component/prod-us-west-httpbin
                          uses: git-push
                        - config:
                            apps:
                              - name: httpbin-prod-us-west-httpbin
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: httpbin
                      sources:
                        stages:
                          - uat
              test:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: test
                  namespace: httpbin
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/httpbin/component/test-httpbin
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/mccutchen/go-httpbin
                            path: ./src/deploy/projects/httpbin/components/test-httpbin
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/test-httpbin.gen.yaml
                            path: ./src/deploy/projects/httpbin/components/test-httpbin
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/httpbin/component/test-httpbin
                          uses: git-push
                        - config:
                            apps:
                              - name: httpbin-test-httpbin
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: httpbin
                      sources:
                        stages:
                          - dev
              uat:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: uat
                  namespace: httpbin
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/httpbin/component/uat-httpbin
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/mccutchen/go-httpbin
                            path: ./src/deploy/projects/httpbin/components/uat-httpbin
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/uat-httpbin.gen.yaml
                            path: ./src/deploy/projects/httpbin/components/uat-httpbin
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/httpbin/component/uat-httpbin
                          uses: git-push
                        - config:
                            apps:
                              - name: httpbin-uat-httpbin
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: httpbin
                      sources:
                        stages:
                          - test
            Warehouse:
              httpbin:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Warehouse
                metadata:
                  name: httpbin
                  namespace: httpbin
                spec:
                  interval: 5m0s
                  subscriptions:
                    - image:
                        discoveryLimit: 5
                        repoURL: quay.io/holos/mccutchen/go-httpbin
                        semverConstraint: ^2.0.0
                        strictSemvers: true
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: projects/httpbin/components/kargo-stages/kargo-stages.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: httpbin-kargo-stages
              resources:
                - resources.gen.yaml
    - artifact: projects/httpbin/gitops/kargo-stages.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/gitops/kargo-stages.application.gen.yaml
          resources:
            Application:
              httpbin-kargo-stages:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: httpbin-kargo-stages
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: httpbin
                  source:
                    path: deploy/projects/httpbin/components/kargo-stages
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: kargo-project
  labels:
    holos.run/component.name: kargo-project
    holos.run/project.name: httpbin
    holos.run/stack.name: httpbin
  annotations:
    app.holos.run/description: kargo-project for project httpbin
spec:
  artifacts:
    - artifact: projects/httpbin/components/kargo-project/kargo-project.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Project:
              httpbin:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Project
                metadata:
                  name: httpbin
                spec:
                  promotionPolicies:
                    - autoPromotionEnabled: true
                      stage: dev
                    - autoPromotionEnabled: true
                      stage: test
                    - autoPromotionEnabled: true
                      stage: uat
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: projects/httpbin/components/kargo-project/kargo-project.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: httpbin-kargo-project
              resources:
                - resources.gen.yaml
    - artifact: projects/httpbin/gitops/kargo-project.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/gitops/kargo-project.application.gen.yaml
          resources:
            Application:
              httpbin-kargo-project:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: httpbin-kargo-project
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: httpbin
                  source:
                    path: deploy/projects/httpbin/components/kargo-project
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: kargo-stages
  labels:
    holos.run/component.name: kargo-stages
    holos.run/project.name: podinfo
    holos.run/stack.name: podinfo
  annotations:
    app.holos.run/description: kargo-stages for project podinfo
spec:
  artifacts:
    - artifact: projects/podinfo/components/kargo-stages/kargo-stages.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Stage:
              dev:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: dev
                  namespace: podinfo
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/podinfo/component/dev-podinfo
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/stefanprodan/podinfo
                            path: ./src/deploy/projects/podinfo/components/dev-podinfo
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/dev-podinfo.gen.yaml
                            path: ./src/deploy/projects/podinfo/components/dev-podinfo
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/podinfo/component/dev-podinfo
                          uses: git-push
                        - config:
                            apps:
                              - name: podinfo-dev-podinfo
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: podinfo
                      sources:
                        direct: true
              prod-us-central:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: prod-us-central
                  namespace: podinfo
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/podinfo/component/prod-us-central-podinfo
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/stefanprodan/podinfo
                            path: ./src/deploy/projects/podinfo/components/prod-us-central-podinfo
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/prod-us-central-podinfo.gen.yaml
                            path: ./src/deploy/projects/podinfo/components/prod-us-central-podinfo
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/podinfo/component/prod-us-central-podinfo
                          uses: git-push
                        - config:
                            apps:
                              - name: podinfo-prod-us-central-podinfo
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: podinfo
                      sources:
                        stages:
                          - uat
              prod-us-east:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: prod-us-east
                  namespace: podinfo
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/podinfo/component/prod-us-east-podinfo
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/stefanprodan/podinfo
                            path: ./src/deploy/projects/podinfo/components/prod-us-east-podinfo
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/prod-us-east-podinfo.gen.yaml
                            path: ./src/deploy/projects/podinfo/components/prod-us-east-podinfo
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/podinfo/component/prod-us-east-podinfo
                          uses: git-push
                        - config:
                            apps:
                              - name: podinfo-prod-us-east-podinfo
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: podinfo
                      sources:
                        stages:
                          - uat
              prod-us-west:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: prod-us-west
                  namespace: podinfo
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/podinfo/component/prod-us-west-podinfo
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/stefanprodan/podinfo
                            path: ./src/deploy/projects/podinfo/components/prod-us-west-podinfo
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/prod-us-west-podinfo.gen.yaml
                            path: ./src/deploy/projects/podinfo/components/prod-us-west-podinfo
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/podinfo/component/prod-us-west-podinfo
                          uses: git-push
                        - config:
                            apps:
                              - name: podinfo-prod-us-west-podinfo
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: podinfo
                      sources:
                        stages:
                          - uat
              test:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: test
                  namespace: podinfo
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/podinfo/component/test-podinfo
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/stefanprodan/podinfo
                            path: ./src/deploy/projects/podinfo/components/test-podinfo
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/test-podinfo.gen.yaml
                            path: ./src/deploy/projects/podinfo/components/test-podinfo
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/podinfo/component/test-podinfo
                          uses: git-push
                        - config:
                            apps:
                              - name: podinfo-test-podinfo
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: podinfo
                      sources:
                        stages:
                          - dev
              uat:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  name: uat
                  namespace: podinfo
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                              - branch: project/podinfo/component/uat-podinfo
                                create: true
                                path: ./out
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - config:
                            path: ./out
                          uses: git-clear
                        - as: update-image
                          config:
                            images:
                              - image: quay.io/holos/stefanprodan/podinfo
                            path: ./src/deploy/projects/podinfo/components/uat-podinfo
                          uses: kustomize-set-image
                        - config:
                            outPath: ./out/uat-podinfo.gen.yaml
                            path: ./src/deploy/projects/podinfo/components/uat-podinfo
                          uses: kustomize-build
                        - as: commit
                          config:
                            messageFromSteps:
                              - update-image
                            path: ./out
                          uses: git-commit
                        - config:
                            path: ./out
                            targetBranch: project/podinfo/component/uat-podinfo
                          uses: git-push
                        - config:
                            apps:
                              - name: podinfo-uat-podinfo
                                sources:
                                  - desiredCommitFromStep: commit
                                    repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: argocd-update
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: podinfo
                      sources:
                        stages:
                          - test
            Warehouse:
              podinfo:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Warehouse
                metadata:
                  name: podinfo
                  namespace: podinfo
                spec:
                  interval: 5m0s
                  subscriptions:
                    - image:
                        discoveryLimit: 5
                        repoURL: quay.io/holos/stefanprodan/podinfo
                        semverConstraint: ^6.0.0
                        strictSemvers: true
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: projects/podinfo/components/kargo-stages/kargo-stages.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: podinfo-kargo-stages
              resources:
                - resources.gen.yaml
    - artifact: projects/podinfo/gitops/kargo-stages.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/gitops/kargo-stages.application.gen.yaml
          resources:
            Application:
              podinfo-kargo-stages:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: podinfo-kargo-stages
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: podinfo
                  source:
                    path: deploy/projects/podinfo/components/kargo-stages
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: kargo-project
  labels:
    holos.run/component.name: kargo-project
    holos.run/project.name: podinfo
    holos.run/stack.name: podinfo
  annotations:
    app.holos.run/description: kargo-project for project podinfo
spec:
  artifacts:
    - artifact: projects/podinfo/components/kargo-project/kargo-project.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Project:
              podinfo:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Project
                metadata:
                  name: podinfo
                spec:
                  promotionPolicies:
                    - autoPromotionEnabled: true
                      stage: dev
                    - autoPromotionEnabled: true
                      stage: test
                    - autoPromotionEnabled: true
                      stage: uat
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: projects/podinfo/components/kargo-project/kargo-project.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: podinfo-kargo-project
              resources:
                - resources.gen.yaml
    - artifact: projects/podinfo/gitops/kargo-project.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/gitops/kargo-project.application.gen.yaml
          resources:
            Application:
              podinfo-kargo-project:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: podinfo-kargo-project
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: podinfo
                  source:
                    path: deploy/projects/podinfo/components/kargo-project
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: argocd-crds
  labels:
    holos.run/component.name: argocd-crds
    holos.run/stack.name: argocd
  annotations:
    app.holos.run/description: argocd-crds for stack argocd
    description: argocd custom resource definitions
spec:
  artifacts:
    - artifact: components/argocd-crds/argocd-crds.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
        - kind: File
          output: argocd-crds.2.13.2.yaml
          file:
            source: argocd-crds.2.13.2.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
            - argocd-crds.2.13.2.yaml
          output: components/argocd-crds/argocd-crds.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: argocd-argocd-crds
              resources:
                - resources.gen.yaml
                - argocd-crds.2.13.2.yaml
    - artifact: gitops/argocd-crds.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/argocd-crds.application.gen.yaml
          resources:
            Application:
              argocd-argocd-crds:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: argocd-argocd-crds
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: argocd
                  source:
                    path: deploy/components/argocd-crds
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: argocd-secrets
  labels:
    holos.run/component.name: argocd-secrets
    holos.run/stack.name: argocd
  annotations:
    app.holos.run/description: argocd-secrets for stack argocd
    description: argocd secrets needed before pods
spec:
  artifacts:
    - artifact: components/argocd-secrets/argocd-secrets.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ExternalSecret:
              argocd-redis:
                apiVersion: external-secrets.io/v1beta1
                kind: ExternalSecret
                metadata:
                  name: argocd-redis
                  namespace: argocd
                spec:
                  dataFrom:
                    - rewrite:
                        - transform:
                            template: password
                      sourceRef:
                        generatorRef:
                          apiVersion: generators.external-secrets.io/v1alpha1
                          kind: Password
                          name: argocd-redis
                  target:
                    creationPolicy: Owner
                    deletionPolicy: Delete
                    template:
                      data:
                        auth: '{{ .password }}'
                      engineVersion: v2
                      mergePolicy: Replace
                      type: Opaque
            Password:
              redis:
                apiVersion: generators.external-secrets.io/v1alpha1
                kind: Password
                metadata:
                  name: argocd-redis
                  namespace: argocd
                spec:
                  allowRepeat: true
                  digits: 4
                  length: 16
                  noUpper: false
                  symbols: 0
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: components/argocd-secrets/argocd-secrets.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: argocd-argocd-secrets
              resources:
                - resources.gen.yaml
    - artifact: gitops/argocd-secrets.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/argocd-secrets.application.gen.yaml
          resources:
            Application:
              argocd-argocd-secrets:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: argocd-argocd-secrets
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: argocd
                  source:
                    path: deploy/components/argocd-secrets
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: argocd
  labels:
    holos.run/component.name: argocd
    holos.run/stack.name: argocd
  annotations:
    app.holos.run/description: argocd for stack argocd
    description: argocd controller services
spec:
  artifacts:
    - artifact: components/argocd/argocd.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: argo-cd
              version: 7.7.10
              release: argocd
              repository:
                name: argocd
                url: https://argoproj.github.io/argo-helm
            values:
              configs:
                cm:
                  admin.enabled: true
                  users.anonymous.enabled: "true"
                params:
                  server.insecure: true
                rbac:
                  policy.csv: |-
                    g, argocd-view, role:readonly
                    g, prod-cluster-view, role:readonly
                    g, prod-cluster-edit, role:readonly
                    g, prod-cluster-admin, role:admin
                  policy.default: role:admin
              crds:
                install: false
              dex:
                enabled: false
              global:
                domain: argocd.holos.localhost
              kubeVersionOverride: 1.29.0
            enableHooks: true
            namespace: argocd
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: argocd
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: components/argocd/argocd.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: argocd-argocd
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: gitops/argocd.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/argocd.application.gen.yaml
          resources:
            Application:
              argocd-argocd:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: argocd-argocd
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: argocd
                  source:
                    path: deploy/components/argocd
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: app-projects
  labels:
    holos.run/component.name: app-projects
    holos.run/stack.name: argocd
  annotations:
    app.holos.run/description: app-projects for stack argocd
    description: argocd AppProject resources for each stack
spec:
  artifacts:
    - artifact: components/app-projects/app-projects.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            AppProject:
              argocd:
                apiVersion: argoproj.io/v1alpha1
                kind: AppProject
                metadata:
                  name: argocd
                  namespace: argocd
                spec:
                  clusterResourceWhitelist:
                    - group: '*'
                      kind: '*'
                  description: Holos managed AppProject
                  destinations:
                    - namespace: '*'
                      server: '*'
                  sourceRepos:
                    - '*'
              httpbin:
                apiVersion: argoproj.io/v1alpha1
                kind: AppProject
                metadata:
                  name: httpbin
                  namespace: argocd
                spec:
                  clusterResourceWhitelist:
                    - group: '*'
                      kind: '*'
                  description: Holos managed AppProject
                  destinations:
                    - namespace: '*'
                      server: '*'
                  sourceRepos:
                    - '*'
              network:
                apiVersion: argoproj.io/v1alpha1
                kind: AppProject
                metadata:
                  name: network
                  namespace: argocd
                spec:
                  clusterResourceWhitelist:
                    - group: '*'
                      kind: '*'
                  description: Holos managed AppProject
                  destinations:
                    - namespace: '*'
                      server: '*'
                  sourceRepos:
                    - '*'
              podinfo:
                apiVersion: argoproj.io/v1alpha1
                kind: AppProject
                metadata:
                  name: podinfo
                  namespace: argocd
                spec:
                  clusterResourceWhitelist:
                    - group: '*'
                      kind: '*'
                  description: Holos managed AppProject
                  destinations:
                    - namespace: '*'
                      server: '*'
                  sourceRepos:
                    - '*'
              security:
                apiVersion: argoproj.io/v1alpha1
                kind: AppProject
                metadata:
                  name: security
                  namespace: argocd
                spec:
                  clusterResourceWhitelist:
                    - group: '*'
                      kind: '*'
                  description: Holos managed AppProject
                  destinations:
                    - namespace: '*'
                      server: '*'
                  sourceRepos:
                    - '*'
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: components/app-projects/app-projects.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: argocd-app-projects
              resources:
                - resources.gen.yaml
    - artifact: gitops/app-projects.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/app-projects.application.gen.yaml
          resources:
            Application:
              argocd-app-projects:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: argocd-app-projects
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: argocd
                  source:
                    path: deploy/components/app-projects
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: rollouts-crds
  labels:
    holos.run/component.name: rollouts-crds
    holos.run/stack.name: argocd
  annotations:
    app.holos.run/description: rollouts-crds for stack argocd
    description: argo rollouts custom resource definitions for kargo
spec:
  artifacts:
    - artifact: components/rollouts-crds/rollouts-crds.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
        - kind: File
          output: crds.yaml
          file:
            source: crds.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
            - crds.yaml
          output: components/rollouts-crds/rollouts-crds.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: argocd-rollouts-crds
              resources:
                - resources.gen.yaml
                - crds.yaml
    - artifact: gitops/rollouts-crds.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/rollouts-crds.application.gen.yaml
          resources:
            Application:
              argocd-rollouts-crds:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: argocd-rollouts-crds
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: argocd
                  source:
                    path: deploy/components/rollouts-crds
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: rollouts
  labels:
    holos.run/component.name: rollouts
    holos.run/stack.name: argocd
  annotations:
    app.holos.run/description: rollouts for stack argocd
    description: argo rollouts controller service
spec:
  artifacts:
    - artifact: components/rollouts/rollouts.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
        - kind: File
          output: rollouts.yaml
          file:
            source: rollouts.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
            - rollouts.yaml
          output: components/rollouts/rollouts.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: argocd-rollouts
              namespace: argo-rollouts
              resources:
                - resources.gen.yaml
                - rollouts.yaml
    - artifact: gitops/rollouts.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/rollouts.application.gen.yaml
          resources:
            Application:
              argocd-rollouts:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: argocd-rollouts
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: argocd
                  source:
                    path: deploy/components/rollouts
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: kargo-secrets
  labels:
    holos.run/component.name: kargo-secrets
    holos.run/stack.name: argocd
  annotations:
    app.holos.run/description: kargo-secrets for stack argocd
    description: kargo github app credentials
spec:
  artifacts:
    - artifact: components/kargo-secrets/kargo-secrets.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ExternalSecret:
              creds:
                apiVersion: external-secrets.io/v1beta1
                kind: ExternalSecret
                metadata:
                  name: admin-credentials
                  namespace: kargo
                spec:
                  dataFrom:
                    - rewrite:
                        - transform:
                            template: password
                      sourceRef:
                        generatorRef:
                          apiVersion: generators.external-secrets.io/v1alpha1
                          kind: Password
                          name: admin-password-generator
                    - rewrite:
                        - transform:
                            template: ADMIN_ACCOUNT_TOKEN_SIGNING_KEY
                      sourceRef:
                        generatorRef:
                          apiVersion: generators.external-secrets.io/v1alpha1
                          kind: Password
                          name: admin-signing-key-generator
                  refreshInterval: 24h
                  target:
                    creationPolicy: Owner
                    deletionPolicy: Delete
                    template:
                      data:
                        ADMIN_ACCOUNT_PASSWORD_HASH: '{{ .password | bcrypt }}'
                      engineVersion: v2
                      mergePolicy: Merge
                      type: Opaque
            Password:
              admin:
                apiVersion: generators.external-secrets.io/v1alpha1
                kind: Password
                metadata:
                  name: admin-password-generator
                  namespace: kargo
                spec:
                  allowRepeat: true
                  digits: 4
                  length: 32
                  noUpper: false
                  symbols: 4
              signingKey:
                apiVersion: generators.external-secrets.io/v1alpha1
                kind: Password
                metadata:
                  name: admin-signing-key-generator
                  namespace: kargo
                spec:
                  allowRepeat: true
                  digits: 4
                  length: 32
                  noUpper: false
                  symbols: 4
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: components/kargo-secrets/kargo-secrets.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: argocd-kargo-secrets
              resources:
                - resources.gen.yaml
    - artifact: gitops/kargo-secrets.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/kargo-secrets.application.gen.yaml
          resources:
            Application:
              argocd-kargo-secrets:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: argocd-kargo-secrets
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: argocd
                  source:
                    path: deploy/components/kargo-secrets
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: kargo
  labels:
    holos.run/component.name: kargo
    holos.run/stack.name: argocd
  annotations:
    app.holos.run/description: kargo for stack argocd
    description: kargo controllers and crds
spec:
  artifacts:
    - artifact: components/kargo/kargo.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: oci://ghcr.io/akuity/kargo-charts/kargo
              version: 1.1.1
              release: kargo
            values:
              api:
                adminAccount:
                  enabled: true
                  passwordHash: ""
                  tokenSigningKey: ""
                  tokenTTL: 24h
                affinity: {}
                annotations: {}
                argocd:
                  urls: null
                cabundle:
                  configMapName: ""
                  secretName: ""
                enabled: true
                env: []
                envFrom: []
                host: localhost
                ingress:
                  annotations: {}
                  enabled: false
                  ingressClassName: null
                  pathType: ImplementationSpecific
                  tls:
                    enabled: false
                    selfSignedCert: true
                labels: {}
                logLevel: INFO
                nodeSelector: {}
                oidc:
                  additionalScopes:
                    - groups
                  admins:
                    claims: {}
                  cliClientID: null
                  clientID: null
                  dex:
                    affinity: {}
                    annotations: {}
                    connectors: []
                    enabled: false
                    env: []
                    envFrom: []
                    image:
                      pullPolicy: IfNotPresent
                      pullSecrets: []
                      repository: ghcr.io/dexidp/dex
                      tag: v2.37.0
                    nodeSelector: {}
                    probes:
                      enabled: true
                    resources: {}
                    securityContext: {}
                    skipApprovalScreen: true
                    tls:
                      selfSignedCert: true
                    tolerations: []
                    volumeMounts: null
                    volumes: []
                  enabled: false
                  globalServiceAccounts:
                    namespaces: []
                  issuerURL: null
                  viewers:
                    claims: {}
                permissiveCORSPolicyEnabled: false
                podAnnotations: {}
                podLabels: {}
                probes:
                  enabled: true
                replicas: 1
                resources: {}
                rollouts:
                  integrationEnabled: true
                secret:
                  name: admin-credentials
                secretManagementEnabled: true
                securityContext: {}
                service:
                  annotations: {}
                  type: ClusterIP
                tls:
                  enabled: false
                  selfSignedCert: true
                tolerations: []
              controller:
                affinity: {}
                annotations: {}
                argocd:
                  integrationEnabled: true
                  namespace: argocd
                  watchArgocdNamespaceOnly: false
                cabundle:
                  configMapName: ""
                  secretName: ""
                enabled: true
                env: []
                envFrom: []
                gitClient:
                  email: no-reply@kargo.io
                  name: Kargo
                  signingKeySecret:
                    name: ""
                    type: ""
                globalCredentials:
                  namespaces:
                    - kargo
                labels: {}
                logLevel: INFO
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                resources: {}
                rollouts:
                  controllerInstanceID: ""
                  integrationEnabled: true
                securityContext: {}
                serviceAccount:
                  clusterWideSecretReadingEnabled: true
                  iamRole: ""
                tolerations: []
              crds:
                install: true
                keep: true
              garbageCollector:
                affinity: {}
                annotations: {}
                enabled: true
                env: []
                envFrom: []
                labels: {}
                logLevel: INFO
                maxRetainedFreight: 20
                maxRetainedPromotions: 20
                minFreightDeletionAge: 336h
                minPromotionDeletionAge: 336h
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                resources: {}
                schedule: 0 * * * *
                securityContext: {}
                tolerations: []
                workers: 3
              global:
                affinity: {}
                annotations: {}
                env: []
                envFrom: []
                labels: {}
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                securityContext: {}
                tolerations: []
              image:
                pullPolicy: IfNotPresent
                pullSecrets: []
                repository: ghcr.io/akuity/kargo
                tag: ""
              kubeconfigSecrets: {}
              managementController:
                affinity: {}
                annotations: {}
                enabled: true
                env: []
                envFrom: []
                labels: {}
                logLevel: INFO
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                resources: {}
                securityContext: {}
                tolerations: []
              rbac:
                installClusterRoleBindings: true
                installClusterRoles: true
              webhooks:
                register: true
              webhooksServer:
                affinity: {}
                annotations: {}
                controlplaneUserRegex: ""
                enabled: true
                env: []
                envFrom: []
                labels: {}
                logLevel: INFO
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                replicas: 1
                resources: {}
                securityContext: {}
                tls:
                  selfSignedCert: true
                tolerations: []
            enableHooks: true
            namespace: kargo
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: kargo
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: components/kargo/kargo.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: argocd-kargo
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: gitops/kargo.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/kargo.application.gen.yaml
          resources:
            Application:
              argocd-kargo:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: argocd-kargo
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: argocd
                  source:
                    path: deploy/components/kargo
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: kargo-promoter
  labels:
    holos.run/component.name: kargo-promoter
    holos.run/stack.name: argocd
  annotations:
    app.holos.run/description: kargo-promoter for stack argocd
    description: kargo kargo promotion stages
spec:
  artifacts:
    - artifact: components/kargo-promoter/kargo-promoter.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Project:
              kargo:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Project
                metadata:
                  annotations:
                    link.argocd.argoproj.io/external-link: https://kargo.holos.localhost/project/kargo
                  name: kargo
                spec:
                  promotionPolicies:
                    - autoPromotionEnabled: true
                      stage: main
            Stage:
              main:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  annotations:
                    link.argocd.argoproj.io/external-link: https://kargo.holos.localhost/project/kargo/stage/main
                  name: main
                  namespace: kargo
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - as: update
                          config:
                            path: src/config/kargo/kargo.yaml
                            updates:
                              - key: chart.version
                                value: ${{ chartFrom('oci://ghcr.io/akuity/kargo-charts/kargo', warehouse('kargo')).Version }}
                          uses: yaml-update
                        - as: commit
                          config:
                            message: 'kargo: update to ${{ chartFrom(''oci://ghcr.io/akuity/kargo-charts/kargo'', warehouse(''kargo'')).Version }}'
                            path: ./src
                          uses: git-commit
                        - as: push
                          config:
                            generateTargetBranch: true
                            path: ./src
                          uses: git-push
                        - as: pull
                          config:
                            repoURL: https://github.com/holos-run/kargo-demo.git
                            sourceBranch: ${{ outputs.push.branch }}
                            targetBranch: main
                          uses: git-open-pr
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: kargo
                      sources:
                        direct: true
            Warehouse:
              kargo:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Warehouse
                metadata:
                  annotations:
                    link.argocd.argoproj.io/external-link: https://kargo.holos.localhost/project/kargo/warehouse/kargo
                  name: kargo
                  namespace: kargo
                spec:
                  freightCreationPolicy: Automatic
                  interval: 5m0s
                  subscriptions:
                    - chart:
                        repoURL: oci://ghcr.io/akuity/kargo-charts/kargo
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: components/kargo-promoter/kargo-promoter.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: argocd-kargo-promoter
              resources:
                - resources.gen.yaml
    - artifact: gitops/kargo-promoter.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/kargo-promoter.application.gen.yaml
          resources:
            Application:
              argocd-kargo-promoter:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    link.argocd.argoproj.io/external-link: https://kargo.holos.localhost/project/kargo
                  labels:
                    kargo.project: kargo
                  name: argocd-kargo-promoter
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  info:
                    - name: Kargo Project
                      value: https://kargo.holos.localhost/project/kargo
                  project: argocd
                  source:
                    path: deploy/components/kargo-promoter
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: gateway-api
  labels:
    holos.run/component.name: gateway-api
    holos.run/stack.name: network
  annotations:
    app.holos.run/description: gateway-api for stack network
    description: gateway api custom resource definitions
spec:
  artifacts:
    - artifact: components/gateway-api/gateway-api.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
        - kind: File
          output: standard/gateway.networking.k8s.io_gatewayclasses.yaml
          file:
            source: standard/gateway.networking.k8s.io_gatewayclasses.yaml
        - kind: File
          output: standard/gateway.networking.k8s.io_gateways.yaml
          file:
            source: standard/gateway.networking.k8s.io_gateways.yaml
        - kind: File
          output: standard/gateway.networking.k8s.io_grpcroutes.yaml
          file:
            source: standard/gateway.networking.k8s.io_grpcroutes.yaml
        - kind: File
          output: standard/gateway.networking.k8s.io_httproutes.yaml
          file:
            source: standard/gateway.networking.k8s.io_httproutes.yaml
        - kind: File
          output: standard/gateway.networking.k8s.io_referencegrants.yaml
          file:
            source: standard/gateway.networking.k8s.io_referencegrants.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
            - standard/gateway.networking.k8s.io_gatewayclasses.yaml
            - standard/gateway.networking.k8s.io_gateways.yaml
            - standard/gateway.networking.k8s.io_grpcroutes.yaml
            - standard/gateway.networking.k8s.io_httproutes.yaml
            - standard/gateway.networking.k8s.io_referencegrants.yaml
          output: components/gateway-api/gateway-api.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: network-gateway-api
              resources:
                - resources.gen.yaml
                - standard/gateway.networking.k8s.io_gatewayclasses.yaml
                - standard/gateway.networking.k8s.io_gateways.yaml
                - standard/gateway.networking.k8s.io_grpcroutes.yaml
                - standard/gateway.networking.k8s.io_httproutes.yaml
                - standard/gateway.networking.k8s.io_referencegrants.yaml
    - artifact: gitops/gateway-api.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/gateway-api.application.gen.yaml
          resources:
            Application:
              network-gateway-api:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: network-gateway-api
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: network
                  source:
                    path: deploy/components/gateway-api
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: istio-base
  labels:
    holos.run/component.name: istio-base
    holos.run/stack.name: network
  annotations:
    app.holos.run/description: istio-base for stack network
    description: istio base resources
spec:
  artifacts:
    - artifact: components/istio-base/istio-base.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: base
              version: 1.23.1
              release: base
              repository:
                name: istio
                url: https://istio-release.storage.googleapis.com/charts
            values:
              global:
                istioNamespace: istio-system
              profile: ambient
            namespace: istio-system
        - kind: Resources
          output: resources.gen.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: components/istio-base/istio-base.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: network-istio-base
              patches:
                - patch: |
                    - op: replace
                      path: /webhooks/0/failurePolicy
                      value: Fail
                  target:
                    group: admissionregistration.k8s.io
                    kind: ValidatingWebhookConfiguration
                    name: istiod-default-validator
                    version: v1
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: gitops/istio-base.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/istio-base.application.gen.yaml
          resources:
            Application:
              network-istio-base:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: network-istio-base
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: network
                  source:
                    path: deploy/components/istio-base
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: istiod
  labels:
    holos.run/component.name: istiod
    holos.run/stack.name: network
  annotations:
    app.holos.run/description: istiod for stack network
    description: istiod controller service
spec:
  artifacts:
    - artifact: components/istiod/istiod.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: istiod
              version: 1.23.1
              release: istiod
              repository:
                name: istio
                url: https://istio-release.storage.googleapis.com/charts
            values:
              global:
                istioNamespace: istio-system
              profile: ambient
            namespace: istio-system
        - kind: Resources
          output: resources.gen.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: components/istiod/istiod.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: network-istiod
              patches:
                - patch: |
                    - op: replace
                      path: /webhooks/0/failurePolicy
                      value: Fail
                  target:
                    group: admissionregistration.k8s.io
                    kind: ValidatingWebhookConfiguration
                    name: istio-validator-istio-system
                    version: v1
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: gitops/istiod.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/istiod.application.gen.yaml
          resources:
            Application:
              network-istiod:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: network-istiod
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: network
                  source:
                    path: deploy/components/istiod
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: istio-cni
  labels:
    holos.run/component.name: istio-cni
    holos.run/stack.name: network
  annotations:
    app.holos.run/description: istio-cni for stack network
    description: istio cni
spec:
  artifacts:
    - artifact: components/istio-cni/istio-cni.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: cni
              version: 1.23.1
              release: cni
              repository:
                name: istio
                url: https://istio-release.storage.googleapis.com/charts
            values:
              cni:
                cniBinDir: /bin
                cniConfDir: /var/lib/rancher/k3s/agent/etc/cni/net.d
              global:
                istioNamespace: istio-system
              profile: ambient
            namespace: istio-system
        - kind: Resources
          output: resources.gen.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: components/istio-cni/istio-cni.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: network-istio-cni
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: gitops/istio-cni.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/istio-cni.application.gen.yaml
          resources:
            Application:
              network-istio-cni:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: network-istio-cni
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: network
                  source:
                    path: deploy/components/istio-cni
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: istio-ztunnel
  labels:
    holos.run/component.name: istio-ztunnel
    holos.run/stack.name: network
  annotations:
    app.holos.run/description: istio-ztunnel for stack network
    description: istio ztunnel for ambient mode
spec:
  artifacts:
    - artifact: components/istio-ztunnel/istio-ztunnel.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: ztunnel
              version: 1.23.1
              release: ztunnel
              repository:
                name: istio
                url: https://istio-release.storage.googleapis.com/charts
            values:
              global:
                istioNamespace: istio-system
              profile: ambient
            namespace: istio-system
        - kind: Resources
          output: resources.gen.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: components/istio-ztunnel/istio-ztunnel.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: network-istio-ztunnel
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: gitops/istio-ztunnel.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/istio-ztunnel.application.gen.yaml
          resources:
            Application:
              network-istio-ztunnel:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: network-istio-ztunnel
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: network
                  source:
                    path: deploy/components/istio-ztunnel
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: istio-gateway
  labels:
    holos.run/component.name: istio-gateway
    holos.run/stack.name: network
  annotations:
    app.holos.run/description: istio-gateway for stack network
    description: istio ingress gateway
spec:
  artifacts:
    - artifact: components/istio-gateway/istio-gateway.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Certificate:
              gateway-cert:
                apiVersion: cert-manager.io/v1
                kind: Certificate
                metadata:
                  name: gateway-cert
                  namespace: istio-ingress
                spec:
                  commonName: holos.localhost
                  dnsNames:
                    - holos.localhost
                    - '*.holos.localhost'
                  issuerRef:
                    kind: ClusterIssuer
                    name: local-ca
                  secretName: gateway-cert
            Gateway:
              default:
                apiVersion: gateway.networking.k8s.io/v1
                kind: Gateway
                metadata:
                  name: default
                  namespace: istio-ingress
                spec:
                  gatewayClassName: istio
                  listeners:
                    - allowedRoutes:
                        namespaces:
                          from: Same
                      name: http
                      port: 80
                      protocol: HTTP
                    - allowedRoutes:
                        namespaces:
                          from: Same
                      name: https
                      port: 443
                      protocol: HTTPS
                      tls:
                        certificateRefs:
                          - kind: Secret
                            name: gateway-cert
                        mode: Terminate
            ServiceAccount:
              default-istio:
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  labels:
                    gateway.istio.io/managed: istio.io-gateway-controller
                    gateway.networking.k8s.io/gateway-name: default
                    istio.io/gateway-name: default
                  name: default-istio
                  namespace: istio-ingress
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: components/istio-gateway/istio-gateway.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: network-istio-gateway
              resources:
                - resources.gen.yaml
    - artifact: gitops/istio-gateway.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/istio-gateway.application.gen.yaml
          resources:
            Application:
              network-istio-gateway:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: network-istio-gateway
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: network
                  source:
                    path: deploy/components/istio-gateway
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: httproutes
  labels:
    component: httproutes
    holos.run/component.name: httproutes
    holos.run/stack.name: network
  annotations:
    app.holos.run/description: httproutes for stack network
spec:
  artifacts:
    - artifact: components/httproutes/httproutes.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            HTTPRoute:
              argocd:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: argocd
                    argocd.argoproj.io/instance: network-httproutes
                  name: argocd
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - argocd.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: argocd-server
                          namespace: argocd
                          port: 80
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              dev-httpbin:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: dev-httpbin
                    argocd.argoproj.io/instance: network-httproutes
                  name: dev-httpbin
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - dev-httpbin.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: httpbin
                          namespace: dev-httpbin
                          port: 80
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              dev-podinfo:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: dev-podinfo
                    argocd.argoproj.io/instance: network-httproutes
                  name: dev-podinfo
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - dev-podinfo.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: podinfo
                          namespace: dev-podinfo
                          port: 9898
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              httpbin:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: httpbin
                    argocd.argoproj.io/instance: network-httproutes
                  name: httpbin
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - httpbin.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: httpbin
                          namespace: prod-us-east-httpbin
                          port: 80
                        - name: httpbin
                          namespace: prod-us-central-httpbin
                          port: 80
                        - name: httpbin
                          namespace: prod-us-west-httpbin
                          port: 80
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              kargo:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: kargo
                    argocd.argoproj.io/instance: network-httproutes
                  name: kargo
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - kargo.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: kargo-api
                          namespace: kargo
                          port: 80
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              podinfo:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: podinfo
                    argocd.argoproj.io/instance: network-httproutes
                  name: podinfo
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - podinfo.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: podinfo
                          namespace: prod-us-east-podinfo
                          port: 9898
                        - name: podinfo
                          namespace: prod-us-central-podinfo
                          port: 9898
                        - name: podinfo
                          namespace: prod-us-west-podinfo
                          port: 9898
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              prod-us-central-podinfo:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: prod-us-central-podinfo
                    argocd.argoproj.io/instance: network-httproutes
                  name: prod-us-central-podinfo
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - prod-us-central-podinfo.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: podinfo
                          namespace: prod-us-central-podinfo
                          port: 9898
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              prod-us-east-podinfo:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: prod-us-east-podinfo
                    argocd.argoproj.io/instance: network-httproutes
                  name: prod-us-east-podinfo
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - prod-us-east-podinfo.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: podinfo
                          namespace: prod-us-east-podinfo
                          port: 9898
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              prod-us-west-podinfo:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: prod-us-west-podinfo
                    argocd.argoproj.io/instance: network-httproutes
                  name: prod-us-west-podinfo
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - prod-us-west-podinfo.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: podinfo
                          namespace: prod-us-west-podinfo
                          port: 9898
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              test-httpbin:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: test-httpbin
                    argocd.argoproj.io/instance: network-httproutes
                  name: test-httpbin
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - test-httpbin.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: httpbin
                          namespace: test-httpbin
                          port: 80
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              test-podinfo:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: test-podinfo
                    argocd.argoproj.io/instance: network-httproutes
                  name: test-podinfo
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - test-podinfo.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: podinfo
                          namespace: test-podinfo
                          port: 9898
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              uat-httpbin:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: uat-httpbin
                    argocd.argoproj.io/instance: network-httproutes
                  name: uat-httpbin
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - uat-httpbin.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: httpbin
                          namespace: uat-httpbin
                          port: 80
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
              uat-podinfo:
                apiVersion: gateway.networking.k8s.io/v1
                kind: HTTPRoute
                metadata:
                  labels:
                    app: uat-podinfo
                    argocd.argoproj.io/instance: network-httproutes
                  name: uat-podinfo
                  namespace: istio-ingress
                spec:
                  hostnames:
                    - uat-podinfo.holos.localhost
                  parentRefs:
                    - name: default
                      namespace: istio-ingress
                  rules:
                    - backendRefs:
                        - name: podinfo
                          namespace: uat-podinfo
                          port: 9898
                      matches:
                        - path:
                            type: PathPrefix
                            value: /
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: components/httproutes/httproutes.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: network-httproutes
              resources:
                - resources.gen.yaml
    - artifact: gitops/httproutes.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/httproutes.application.gen.yaml
          resources:
            Application:
              network-httproutes:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: network-httproutes
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: network
                  source:
                    path: deploy/components/httproutes
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: namespaces
  labels:
    holos.run/component.name: namespaces
    holos.run/stack.name: security
  annotations:
    app.holos.run/description: namespaces for stack security
    description: configures namespaces for all stacks
spec:
  artifacts:
    - artifact: components/namespaces/namespaces.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Namespace:
              argo-rollouts:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    kubernetes.io/metadata.name: argo-rollouts
                  name: argo-rollouts
              argocd:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    kubernetes.io/metadata.name: argocd
                  name: argocd
              cert-manager:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    kargo.akuity.io/project: "true"
                    kubernetes.io/metadata.name: cert-manager
                  name: cert-manager
              dev-httpbin:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: httpbin
                    holos.run/stage.name: dev
                    holos.run/stage.tier: nonprod
                    kubernetes.io/metadata.name: dev-httpbin
                  name: dev-httpbin
              dev-podinfo:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: podinfo
                    holos.run/stage.name: dev
                    holos.run/stage.tier: nonprod
                    kubernetes.io/metadata.name: dev-podinfo
                  name: dev-podinfo
              external-secrets:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    kubernetes.io/metadata.name: external-secrets
                  name: external-secrets
              httpbin:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    kargo.akuity.io/project: "true"
                    kubernetes.io/metadata.name: httpbin
                  name: httpbin
              istio-ingress:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    kubernetes.io/metadata.name: istio-ingress
                  name: istio-ingress
              istio-system:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    kubernetes.io/metadata.name: istio-system
                  name: istio-system
              kargo:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    kargo.akuity.io/project: "true"
                    kubernetes.io/metadata.name: kargo
                  name: kargo
              podinfo:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    kargo.akuity.io/project: "true"
                    kubernetes.io/metadata.name: podinfo
                  name: podinfo
              prod-us-central-httpbin:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: httpbin
                    holos.run/stage.name: prod-us-central
                    holos.run/stage.tier: prod
                    kubernetes.io/metadata.name: prod-us-central-httpbin
                  name: prod-us-central-httpbin
              prod-us-central-podinfo:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: podinfo
                    holos.run/stage.name: prod-us-central
                    holos.run/stage.tier: prod
                    kubernetes.io/metadata.name: prod-us-central-podinfo
                  name: prod-us-central-podinfo
              prod-us-east-httpbin:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: httpbin
                    holos.run/stage.name: prod-us-east
                    holos.run/stage.tier: prod
                    kubernetes.io/metadata.name: prod-us-east-httpbin
                  name: prod-us-east-httpbin
              prod-us-east-podinfo:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: podinfo
                    holos.run/stage.name: prod-us-east
                    holos.run/stage.tier: prod
                    kubernetes.io/metadata.name: prod-us-east-podinfo
                  name: prod-us-east-podinfo
              prod-us-west-httpbin:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: httpbin
                    holos.run/stage.name: prod-us-west
                    holos.run/stage.tier: prod
                    kubernetes.io/metadata.name: prod-us-west-httpbin
                  name: prod-us-west-httpbin
              prod-us-west-podinfo:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: podinfo
                    holos.run/stage.name: prod-us-west
                    holos.run/stage.tier: prod
                    kubernetes.io/metadata.name: prod-us-west-podinfo
                  name: prod-us-west-podinfo
              test-httpbin:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: httpbin
                    holos.run/stage.name: test
                    holos.run/stage.tier: nonprod
                    kubernetes.io/metadata.name: test-httpbin
                  name: test-httpbin
              test-podinfo:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: podinfo
                    holos.run/stage.name: test
                    holos.run/stage.tier: nonprod
                    kubernetes.io/metadata.name: test-podinfo
                  name: test-podinfo
              uat-httpbin:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: httpbin
                    holos.run/stage.name: uat
                    holos.run/stage.tier: nonprod
                    kubernetes.io/metadata.name: uat-httpbin
                  name: uat-httpbin
              uat-podinfo:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    holos.run/httproute.project: podinfo
                    holos.run/stage.name: uat
                    holos.run/stage.tier: nonprod
                    kubernetes.io/metadata.name: uat-podinfo
                  name: uat-podinfo
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: components/namespaces/namespaces.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: security-namespaces
              resources:
                - resources.gen.yaml
    - artifact: gitops/namespaces.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/namespaces.application.gen.yaml
          resources:
            Application:
              security-namespaces:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: security-namespaces
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: security
                  source:
                    path: deploy/components/namespaces
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: external-secrets-crds
  labels:
    holos.run/component.name: external-secrets-crds
    holos.run/stack.name: security
  annotations:
    app.holos.run/description: external-secrets-crds for stack security
    description: external secrets custom resource definitions
spec:
  artifacts:
    - artifact: components/external-secrets-crds/external-secrets-crds.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
        - kind: File
          output: bundle.0.10.7.yaml
          file:
            source: bundle.0.10.7.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
            - bundle.0.10.7.yaml
          output: components/external-secrets-crds/external-secrets-crds.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: security-external-secrets-crds
              patches:
                - patch: |
                    - op: replace
                      path: /spec/conversion/webhook/clientConfig/service/name
                      value: external-secrets-webhook
                    - op: replace
                      path: /spec/conversion/webhook/clientConfig/service/namespace
                      value: external-secrets
                  target:
                    group: apiextensions.k8s.io
                    kind: CustomResourceDefinition
                    name: clustersecretstores.external-secrets.io
                    version: v1
                - patch: |
                    - op: replace
                      path: /spec/conversion/webhook/clientConfig/service/name
                      value: external-secrets-webhook
                    - op: replace
                      path: /spec/conversion/webhook/clientConfig/service/namespace
                      value: external-secrets
                  target:
                    group: apiextensions.k8s.io
                    kind: CustomResourceDefinition
                    name: externalsecrets.external-secrets.io
                    version: v1
                - patch: |
                    - op: replace
                      path: /spec/conversion/webhook/clientConfig/service/name
                      value: external-secrets-webhook
                    - op: replace
                      path: /spec/conversion/webhook/clientConfig/service/namespace
                      value: external-secrets
                  target:
                    group: apiextensions.k8s.io
                    kind: CustomResourceDefinition
                    name: secretstores.external-secrets.io
                    version: v1
              resources:
                - resources.gen.yaml
                - bundle.0.10.7.yaml
    - artifact: gitops/external-secrets-crds.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/external-secrets-crds.application.gen.yaml
          resources:
            Application:
              security-external-secrets-crds:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: security-external-secrets-crds
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: security
                  source:
                    path: deploy/components/external-secrets-crds
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: external-secrets
  labels:
    holos.run/component.name: external-secrets
    holos.run/stack.name: security
  annotations:
    app.holos.run/description: external-secrets for stack security
    description: external secrets custom resource definitions
spec:
  artifacts:
    - artifact: components/external-secrets/external-secrets.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: external-secrets
              version: 0.10.7
              release: external-secrets
              repository:
                name: external-secrets
                url: https://charts.external-secrets.io
            values:
              installCRDs: false
            namespace: external-secrets
        - kind: Resources
          output: resources.gen.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: components/external-secrets/external-secrets.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: security-external-secrets
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: gitops/external-secrets.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/external-secrets.application.gen.yaml
          resources:
            Application:
              security-external-secrets:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: security-external-secrets
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: security
                  source:
                    path: deploy/components/external-secrets
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: cert-manager
  labels:
    holos.run/component.name: cert-manager
    holos.run/stack.name: security
  annotations:
    app.holos.run/description: cert-manager for stack security
    description: cert-manager operator and custom resource definitions
spec:
  artifacts:
    - artifact: components/cert-manager/cert-manager.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: cert-manager
              version: v1.16.1
              release: cert-manager
              repository:
                name: jetstack
                url: https://charts.jetstack.io
            values:
              acmesolver:
                image:
                  pullPolicy: IfNotPresent
                  repository: quay.io/jetstack/cert-manager-acmesolver
              affinity: {}
              approveSignerNames:
                - issuers.cert-manager.io/*
                - clusterissuers.cert-manager.io/*
              cainjector:
                affinity: {}
                config: {}
                containerSecurityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                      - ALL
                  readOnlyRootFilesystem: true
                enableServiceLinks: false
                enabled: true
                extraArgs: []
                extraEnv: []
                featureGates: ""
                image:
                  pullPolicy: IfNotPresent
                  repository: quay.io/jetstack/cert-manager-cainjector
                nodeSelector:
                  kubernetes.io/os: linux
                podDisruptionBudget:
                  enabled: false
                podLabels: {}
                replicaCount: 1
                resources: {}
                securityContext:
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                serviceAccount:
                  automountServiceAccountToken: true
                  create: true
                serviceLabels: {}
                strategy: {}
                tolerations: []
                topologySpreadConstraints: []
                volumeMounts: []
                volumes: []
              clusterResourceNamespace: ""
              config: {}
              containerSecurityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                readOnlyRootFilesystem: true
              crds:
                enabled: true
                keep: true
              creator: helm
              disableAutoApproval: false
              dns01RecursiveNameservers: ""
              dns01RecursiveNameserversOnly: false
              enableCertificateOwnerRef: false
              enableServiceLinks: false
              enabled: true
              extraArgs: []
              extraEnv: []
              extraObjects: []
              featureGates: ""
              global:
                commonLabels: {}
                imagePullSecrets: []
                leaderElection:
                  namespace: cert-manager
                logLevel: 2
                podSecurityPolicy:
                  enabled: false
                  useAppArmor: true
                priorityClassName: ""
                rbac:
                  aggregateClusterRoles: true
                  create: true
              hostAliases: []
              image:
                pullPolicy: IfNotPresent
                repository: quay.io/jetstack/cert-manager-controller
              ingressShim: {}
              installCRDs: false
              livenessProbe:
                enabled: true
                failureThreshold: 8
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 15
              maxConcurrentChallenges: 60
              namespace: ""
              nodeSelector:
                kubernetes.io/os: linux
              podDisruptionBudget:
                enabled: false
              podLabels: {}
              prometheus:
                enabled: true
                podmonitor:
                  annotations: {}
                  enabled: false
                  endpointAdditionalProperties: {}
                  honorLabels: false
                  interval: 60s
                  labels: {}
                  path: /metrics
                  prometheusInstance: default
                  scrapeTimeout: 30s
                servicemonitor:
                  annotations: {}
                  enabled: false
                  endpointAdditionalProperties: {}
                  honorLabels: false
                  interval: 60s
                  labels: {}
                  path: /metrics
                  prometheusInstance: default
                  scrapeTimeout: 30s
                  targetPort: 9402
              replicaCount: 1
              resources: {}
              securityContext:
                runAsNonRoot: true
                seccompProfile:
                  type: RuntimeDefault
              serviceAccount:
                automountServiceAccountToken: true
                create: true
              startupapicheck:
                affinity: {}
                backoffLimit: 4
                containerSecurityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                      - ALL
                  readOnlyRootFilesystem: true
                enableServiceLinks: false
                enabled: false
                extraArgs:
                  - -v
                extraEnv: []
                image:
                  pullPolicy: IfNotPresent
                  repository: quay.io/jetstack/cert-manager-startupapicheck
                jobAnnotations:
                  helm.sh/hook: post-install
                  helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
                  helm.sh/hook-weight: "1"
                nodeSelector:
                  kubernetes.io/os: linux
                podLabels: {}
                rbac:
                  annotations:
                    helm.sh/hook: post-install
                    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
                    helm.sh/hook-weight: "-5"
                resources: {}
                securityContext:
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                serviceAccount:
                  annotations:
                    helm.sh/hook: post-install
                    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
                    helm.sh/hook-weight: "-5"
                  automountServiceAccountToken: true
                  create: true
                timeout: 1m
                tolerations: []
                volumeMounts: []
                volumes: []
              strategy: {}
              tolerations: []
              topologySpreadConstraints: []
              volumeMounts: []
              volumes: []
              webhook:
                affinity: {}
                config: {}
                containerSecurityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                      - ALL
                  readOnlyRootFilesystem: true
                enableServiceLinks: false
                extraArgs: []
                extraEnv: []
                featureGates: ""
                hostNetwork: false
                image:
                  pullPolicy: IfNotPresent
                  repository: quay.io/jetstack/cert-manager-webhook
                livenessProbe:
                  failureThreshold: 3
                  initialDelaySeconds: 60
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 1
                mutatingWebhookConfiguration:
                  namespaceSelector: {}
                networkPolicy:
                  egress:
                    - ports:
                        - port: 80
                          protocol: TCP
                        - port: 443
                          protocol: TCP
                        - port: 53
                          protocol: TCP
                        - port: 53
                          protocol: UDP
                        - port: 6443
                          protocol: TCP
                      to:
                        - ipBlock:
                            cidr: 0.0.0.0/0
                  enabled: false
                  ingress:
                    - from:
                        - ipBlock:
                            cidr: 0.0.0.0/0
                nodeSelector:
                  kubernetes.io/os: linux
                podDisruptionBudget:
                  enabled: false
                podLabels: {}
                readinessProbe:
                  failureThreshold: 3
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  successThreshold: 1
                  timeoutSeconds: 1
                replicaCount: 1
                resources: {}
                securePort: 10250
                securityContext:
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                serviceAccount:
                  automountServiceAccountToken: true
                  create: true
                serviceIPFamilies: []
                serviceIPFamilyPolicy: ""
                serviceLabels: {}
                serviceType: ClusterIP
                strategy: {}
                timeoutSeconds: 30
                tolerations: []
                topologySpreadConstraints: []
                url: {}
                validatingWebhookConfiguration:
                  namespaceSelector:
                    matchExpressions:
                      - key: cert-manager.io/disable-validation
                        operator: NotIn
                        values:
                          - "true"
                volumeMounts: []
                volumes: []
            enableHooks: true
            namespace: cert-manager
        - kind: Resources
          output: resources.gen.yaml
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: components/cert-manager/cert-manager.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: security-cert-manager
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: gitops/cert-manager.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/cert-manager.application.gen.yaml
          resources:
            Application:
              security-cert-manager:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: cert-manager:main
                  labels: {}
                  name: security-cert-manager
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: security
                  source:
                    path: deploy/components/cert-manager
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: local-ca
  labels:
    holos.run/component.name: local-ca
    holos.run/stack.name: security
  annotations:
    app.holos.run/description: local-ca for stack security
    description: localhost mkcert certificate authority
spec:
  artifacts:
    - artifact: components/local-ca/local-ca.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ClusterIssuer:
              LocalCA:
                apiVersion: cert-manager.io/v1
                kind: ClusterIssuer
                metadata:
                  name: local-ca
                  namespace: cert-manager
                spec:
                  ca:
                    secretName: local-ca
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: components/local-ca/local-ca.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: security-local-ca
              resources:
                - resources.gen.yaml
    - artifact: gitops/local-ca.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/local-ca.application.gen.yaml
          resources:
            Application:
              security-local-ca:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  labels: {}
                  name: security-local-ca
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: security
                  source:
                    path: deploy/components/local-ca
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: cert-manager-promoter
  labels:
    holos.run/component.name: cert-manager-promoter
    holos.run/stack.name: security
  annotations:
    app.holos.run/description: cert-manager-promoter for stack security
    description: cert-manager kargo promotion stages
spec:
  artifacts:
    - artifact: components/cert-manager-promoter/cert-manager-promoter.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Project:
              cert-manager:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Project
                metadata:
                  annotations:
                    link.argocd.argoproj.io/external-link: https://kargo.holos.localhost/project/cert-manager
                  name: cert-manager
                spec:
                  promotionPolicies:
                    - autoPromotionEnabled: true
                      stage: main
            Stage:
              main:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Stage
                metadata:
                  annotations:
                    link.argocd.argoproj.io/external-link: https://kargo.holos.localhost/project/cert-manager/stage/main
                  name: main
                  namespace: cert-manager
                spec:
                  promotionTemplate:
                    spec:
                      steps:
                        - config:
                            checkout:
                              - branch: main
                                path: ./src
                            repoURL: https://github.com/holos-run/kargo-demo.git
                          uses: git-clone
                        - as: update
                          config:
                            path: src/config/certmanager/cert-manager.yaml
                            updates:
                              - key: chart.version
                                value: ${{ chartFrom('https://charts.jetstack.io', 'cert-manager', warehouse('cert-manager')).Version }}
                          uses: yaml-update
                        - as: commit
                          config:
                            message: 'cert-manager: update to ${{ chartFrom(''https://charts.jetstack.io'', ''cert-manager'', warehouse(''cert-manager'')).Version }}'
                            path: ./src
                          uses: git-commit
                        - as: push
                          config:
                            generateTargetBranch: true
                            path: ./src
                          uses: git-push
                        - as: pull
                          config:
                            repoURL: https://github.com/holos-run/kargo-demo.git
                            sourceBranch: ${{ outputs.push.branch }}
                            targetBranch: main
                          uses: git-open-pr
                  requestedFreight:
                    - origin:
                        kind: Warehouse
                        name: cert-manager
                      sources:
                        direct: true
            Warehouse:
              cert-manager:
                apiVersion: kargo.akuity.io/v1alpha1
                kind: Warehouse
                metadata:
                  annotations:
                    link.argocd.argoproj.io/external-link: https://kargo.holos.localhost/project/cert-manager/warehouse/cert-manager
                  name: cert-manager
                  namespace: cert-manager
                spec:
                  freightCreationPolicy: Automatic
                  interval: 5m0s
                  subscriptions:
                    - chart:
                        name: cert-manager
                        repoURL: https://charts.jetstack.io
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: components/cert-manager-promoter/cert-manager-promoter.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: security-cert-manager-promoter
              resources:
                - resources.gen.yaml
    - artifact: gitops/cert-manager-promoter.application.gen.yaml
      generators:
        - kind: Resources
          output: gitops/cert-manager-promoter.application.gen.yaml
          resources:
            Application:
              security-cert-manager-promoter:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    link.argocd.argoproj.io/external-link: https://kargo.holos.localhost/project/cert-manager
                  labels:
                    kargo.project: cert-manager
                  name: security-cert-manager-promoter
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  info:
                    - name: Kargo Project
                      value: https://kargo.holos.localhost/project/cert-manager
                  project: security
                  source:
                    path: deploy/components/cert-manager-promoter
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: main
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: dev-httpbin
  labels:
    holos.run/component.name: dev-httpbin
    holos.run/project.name: httpbin
    holos.run/stack.name: httpbin
  annotations:
    app.holos.run/description: dev-httpbin for project httpbin
spec:
  artifacts:
    - artifact: projects/httpbin/components/dev-httpbin/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/components/dev-httpbin/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - dev-httpbin.gen.yaml
    - artifact: projects/httpbin/components/dev-httpbin/dev-httpbin.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Deployment:
              httpbin:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: httpbin
                  namespace: dev-httpbin
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      app.kubernetes.io/name: httpbin
                  template:
                    metadata:
                      labels:
                        app.kubernetes.io/name: httpbin
                    spec:
                      containers:
                        - image: quay.io/holos/mccutchen/go-httpbin
                          livenessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          name: httpbin
                          ports:
                            - containerPort: 8080
                              name: http
                              protocol: TCP
                          readinessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          resources: {}
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: dev-httpbin
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
            Service:
              httpbin:
                apiVersion: v1
                kind: Service
                metadata:
                  name: httpbin
                  namespace: dev-httpbin
                spec:
                  ports:
                    - appProtocol: http
                      name: http
                      port: 80
                      protocol: TCP
                      targetPort: http
                  selector:
                    app.kubernetes.io/name: httpbin
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: projects/httpbin/components/dev-httpbin/dev-httpbin.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: httpbin-dev-httpbin
              resources:
                - resources.gen.yaml
    - artifact: projects/httpbin/gitops/dev-httpbin.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/gitops/dev-httpbin.application.gen.yaml
          resources:
            Application:
              httpbin-dev-httpbin:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: httpbin:dev
                  labels:
                    stage: dev
                    tier: nonprod
                  name: httpbin-dev-httpbin
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: httpbin
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/httpbin/component/dev-httpbin
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: test-httpbin
  labels:
    holos.run/component.name: test-httpbin
    holos.run/project.name: httpbin
    holos.run/stack.name: httpbin
  annotations:
    app.holos.run/description: test-httpbin for project httpbin
spec:
  artifacts:
    - artifact: projects/httpbin/components/test-httpbin/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/components/test-httpbin/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - test-httpbin.gen.yaml
    - artifact: projects/httpbin/components/test-httpbin/test-httpbin.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Deployment:
              httpbin:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: httpbin
                  namespace: test-httpbin
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      app.kubernetes.io/name: httpbin
                  template:
                    metadata:
                      labels:
                        app.kubernetes.io/name: httpbin
                    spec:
                      containers:
                        - image: quay.io/holos/mccutchen/go-httpbin
                          livenessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          name: httpbin
                          ports:
                            - containerPort: 8080
                              name: http
                              protocol: TCP
                          readinessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          resources: {}
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: test-httpbin
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
            Service:
              httpbin:
                apiVersion: v1
                kind: Service
                metadata:
                  name: httpbin
                  namespace: test-httpbin
                spec:
                  ports:
                    - appProtocol: http
                      name: http
                      port: 80
                      protocol: TCP
                      targetPort: http
                  selector:
                    app.kubernetes.io/name: httpbin
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: projects/httpbin/components/test-httpbin/test-httpbin.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: httpbin-test-httpbin
              resources:
                - resources.gen.yaml
    - artifact: projects/httpbin/gitops/test-httpbin.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/gitops/test-httpbin.application.gen.yaml
          resources:
            Application:
              httpbin-test-httpbin:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: httpbin:test
                  labels:
                    stage: test
                    tier: nonprod
                  name: httpbin-test-httpbin
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: httpbin
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/httpbin/component/test-httpbin
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: uat-httpbin
  labels:
    holos.run/component.name: uat-httpbin
    holos.run/project.name: httpbin
    holos.run/stack.name: httpbin
  annotations:
    app.holos.run/description: uat-httpbin for project httpbin
spec:
  artifacts:
    - artifact: projects/httpbin/components/uat-httpbin/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/components/uat-httpbin/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - uat-httpbin.gen.yaml
    - artifact: projects/httpbin/components/uat-httpbin/uat-httpbin.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Deployment:
              httpbin:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: httpbin
                  namespace: uat-httpbin
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      app.kubernetes.io/name: httpbin
                  template:
                    metadata:
                      labels:
                        app.kubernetes.io/name: httpbin
                    spec:
                      containers:
                        - image: quay.io/holos/mccutchen/go-httpbin
                          livenessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          name: httpbin
                          ports:
                            - containerPort: 8080
                              name: http
                              protocol: TCP
                          readinessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          resources: {}
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: uat-httpbin
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
            Service:
              httpbin:
                apiVersion: v1
                kind: Service
                metadata:
                  name: httpbin
                  namespace: uat-httpbin
                spec:
                  ports:
                    - appProtocol: http
                      name: http
                      port: 80
                      protocol: TCP
                      targetPort: http
                  selector:
                    app.kubernetes.io/name: httpbin
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: projects/httpbin/components/uat-httpbin/uat-httpbin.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: httpbin-uat-httpbin
              resources:
                - resources.gen.yaml
    - artifact: projects/httpbin/gitops/uat-httpbin.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/gitops/uat-httpbin.application.gen.yaml
          resources:
            Application:
              httpbin-uat-httpbin:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: httpbin:uat
                  labels:
                    stage: uat
                    tier: nonprod
                  name: httpbin-uat-httpbin
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: httpbin
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/httpbin/component/uat-httpbin
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: prod-us-east-httpbin
  labels:
    holos.run/component.name: prod-us-east-httpbin
    holos.run/project.name: httpbin
    holos.run/stack.name: httpbin
  annotations:
    app.holos.run/description: prod-us-east-httpbin for project httpbin
spec:
  artifacts:
    - artifact: projects/httpbin/components/prod-us-east-httpbin/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/components/prod-us-east-httpbin/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - prod-us-east-httpbin.gen.yaml
    - artifact: projects/httpbin/components/prod-us-east-httpbin/prod-us-east-httpbin.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Deployment:
              httpbin:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: httpbin
                  namespace: prod-us-east-httpbin
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app.kubernetes.io/name: httpbin
                  template:
                    metadata:
                      labels:
                        app.kubernetes.io/name: httpbin
                    spec:
                      containers:
                        - image: quay.io/holos/mccutchen/go-httpbin
                          livenessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          name: httpbin
                          ports:
                            - containerPort: 8080
                              name: http
                              protocol: TCP
                          readinessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          resources: {}
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: prod-us-east-httpbin
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
            Service:
              httpbin:
                apiVersion: v1
                kind: Service
                metadata:
                  name: httpbin
                  namespace: prod-us-east-httpbin
                spec:
                  ports:
                    - appProtocol: http
                      name: http
                      port: 80
                      protocol: TCP
                      targetPort: http
                  selector:
                    app.kubernetes.io/name: httpbin
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: projects/httpbin/components/prod-us-east-httpbin/prod-us-east-httpbin.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: httpbin-prod-us-east-httpbin
              resources:
                - resources.gen.yaml
    - artifact: projects/httpbin/gitops/prod-us-east-httpbin.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/gitops/prod-us-east-httpbin.application.gen.yaml
          resources:
            Application:
              httpbin-prod-us-east-httpbin:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: httpbin:prod-us-east
                  labels:
                    stage: prod-us-east
                    tier: prod
                  name: httpbin-prod-us-east-httpbin
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: httpbin
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/httpbin/component/prod-us-east-httpbin
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: prod-us-central-httpbin
  labels:
    holos.run/component.name: prod-us-central-httpbin
    holos.run/project.name: httpbin
    holos.run/stack.name: httpbin
  annotations:
    app.holos.run/description: prod-us-central-httpbin for project httpbin
spec:
  artifacts:
    - artifact: projects/httpbin/components/prod-us-central-httpbin/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/components/prod-us-central-httpbin/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - prod-us-central-httpbin.gen.yaml
    - artifact: projects/httpbin/components/prod-us-central-httpbin/prod-us-central-httpbin.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Deployment:
              httpbin:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: httpbin
                  namespace: prod-us-central-httpbin
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app.kubernetes.io/name: httpbin
                  template:
                    metadata:
                      labels:
                        app.kubernetes.io/name: httpbin
                    spec:
                      containers:
                        - image: quay.io/holos/mccutchen/go-httpbin
                          livenessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          name: httpbin
                          ports:
                            - containerPort: 8080
                              name: http
                              protocol: TCP
                          readinessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          resources: {}
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: prod-us-central-httpbin
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
            Service:
              httpbin:
                apiVersion: v1
                kind: Service
                metadata:
                  name: httpbin
                  namespace: prod-us-central-httpbin
                spec:
                  ports:
                    - appProtocol: http
                      name: http
                      port: 80
                      protocol: TCP
                      targetPort: http
                  selector:
                    app.kubernetes.io/name: httpbin
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: projects/httpbin/components/prod-us-central-httpbin/prod-us-central-httpbin.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: httpbin-prod-us-central-httpbin
              resources:
                - resources.gen.yaml
    - artifact: projects/httpbin/gitops/prod-us-central-httpbin.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/gitops/prod-us-central-httpbin.application.gen.yaml
          resources:
            Application:
              httpbin-prod-us-central-httpbin:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: httpbin:prod-us-central
                  labels:
                    stage: prod-us-central
                    tier: prod
                  name: httpbin-prod-us-central-httpbin
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: httpbin
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/httpbin/component/prod-us-central-httpbin
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: prod-us-west-httpbin
  labels:
    holos.run/component.name: prod-us-west-httpbin
    holos.run/project.name: httpbin
    holos.run/stack.name: httpbin
  annotations:
    app.holos.run/description: prod-us-west-httpbin for project httpbin
spec:
  artifacts:
    - artifact: projects/httpbin/components/prod-us-west-httpbin/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/components/prod-us-west-httpbin/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - prod-us-west-httpbin.gen.yaml
    - artifact: projects/httpbin/components/prod-us-west-httpbin/prod-us-west-httpbin.gen.yaml
      generators:
        - kind: Resources
          output: resources.gen.yaml
          resources:
            Deployment:
              httpbin:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: httpbin
                  namespace: prod-us-west-httpbin
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app.kubernetes.io/name: httpbin
                  template:
                    metadata:
                      labels:
                        app.kubernetes.io/name: httpbin
                    spec:
                      containers:
                        - image: quay.io/holos/mccutchen/go-httpbin
                          livenessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          name: httpbin
                          ports:
                            - containerPort: 8080
                              name: http
                              protocol: TCP
                          readinessProbe:
                            httpGet:
                              path: /status/200
                              port: http
                          resources: {}
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: prod-us-west-httpbin
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
            Service:
              httpbin:
                apiVersion: v1
                kind: Service
                metadata:
                  name: httpbin
                  namespace: prod-us-west-httpbin
                spec:
                  ports:
                    - appProtocol: http
                      name: http
                      port: 80
                      protocol: TCP
                      targetPort: http
                  selector:
                    app.kubernetes.io/name: httpbin
      transformers:
        - kind: Kustomize
          inputs:
            - resources.gen.yaml
          output: projects/httpbin/components/prod-us-west-httpbin/prod-us-west-httpbin.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: httpbin-prod-us-west-httpbin
              resources:
                - resources.gen.yaml
    - artifact: projects/httpbin/gitops/prod-us-west-httpbin.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/httpbin/gitops/prod-us-west-httpbin.application.gen.yaml
          resources:
            Application:
              httpbin-prod-us-west-httpbin:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: httpbin:prod-us-west
                  labels:
                    stage: prod-us-west
                    tier: prod
                  name: httpbin-prod-us-west-httpbin
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: httpbin
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/httpbin/component/prod-us-west-httpbin
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: dev-podinfo
  labels:
    holos.run/component.name: dev-podinfo
    holos.run/project.name: podinfo
    holos.run/stack.name: podinfo
  annotations:
    app.holos.run/description: dev-podinfo for project podinfo
spec:
  artifacts:
    - artifact: projects/podinfo/components/dev-podinfo/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/components/dev-podinfo/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - dev-podinfo.gen.yaml
    - artifact: projects/podinfo/components/dev-podinfo/dev-podinfo.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: oci://ghcr.io/stefanprodan/charts/podinfo
              version: 6.7.0
              release: podinfo
            values:
              affinity: {}
              backends: []
              cache: ""
              certificate:
                create: false
                dnsNames:
                  - podinfo
                issuerRef:
                  kind: ClusterIssuer
                  name: self-signed
              config:
                name: ""
                path: ""
              extraArgs: []
              extraEnvs: []
              faults:
                delay: false
                error: false
                testFail: false
                testTimeout: false
                unhealthy: false
                unready: false
              h2c:
                enabled: false
              hpa:
                enabled: false
                maxReplicas: 10
              image:
                pullPolicy: IfNotPresent
                repository: quay.io/holos/stefanprodan/podinfo
                tag: 6.7.0
              ingress:
                additionalLabels: {}
                annotations: {}
                className: ""
                enabled: false
                hosts:
                  - host: podinfo.local
                    paths:
                      - path: /
                        pathType: ImplementationSpecific
                tls: []
              linkerd:
                profile:
                  enabled: false
              logLevel: info
              nodeSelector: {}
              podAnnotations: {}
              podDisruptionBudget: {}
              probes:
                liveness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                readiness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                startup:
                  enable: false
                  failureThreshold: 20
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
              redis:
                enabled: false
                repository: redis
                tag: 7.0.7
              replicaCount: 1
              resources:
                requests:
                  cpu: 1m
                  memory: 16Mi
              securityContext: {}
              service:
                annotations: {}
                enabled: true
                externalPort: 9898
                grpcPort: 9999
                grpcService: podinfo
                httpPort: 9898
                metricsPort: 9797
                nodePort: 31198
                type: ClusterIP
              serviceAccount:
                enabled: false
                imagePullSecrets: []
              serviceMonitor:
                additionalLabels: {}
                enabled: false
                interval: 15s
              tls:
                certPath: /data/cert
                enabled: false
                port: 9899
              tolerations: []
              topologySpreadConstraints: []
              ui:
                color: '#34577c'
                logo: ""
                message: 'Hello! Stage: dev'
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: dev-podinfo
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: projects/podinfo/components/dev-podinfo/dev-podinfo.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: podinfo-dev-podinfo
              namespace: dev-podinfo
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: projects/podinfo/gitops/dev-podinfo.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/gitops/dev-podinfo.application.gen.yaml
          resources:
            Application:
              podinfo-dev-podinfo:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: podinfo:dev
                  labels:
                    stage: dev
                    tier: nonprod
                  name: podinfo-dev-podinfo
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: podinfo
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/podinfo/component/dev-podinfo
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: test-podinfo
  labels:
    holos.run/component.name: test-podinfo
    holos.run/project.name: podinfo
    holos.run/stack.name: podinfo
  annotations:
    app.holos.run/description: test-podinfo for project podinfo
spec:
  artifacts:
    - artifact: projects/podinfo/components/test-podinfo/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/components/test-podinfo/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - test-podinfo.gen.yaml
    - artifact: projects/podinfo/components/test-podinfo/test-podinfo.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: oci://ghcr.io/stefanprodan/charts/podinfo
              version: 6.7.0
              release: podinfo
            values:
              affinity: {}
              backends: []
              cache: ""
              certificate:
                create: false
                dnsNames:
                  - podinfo
                issuerRef:
                  kind: ClusterIssuer
                  name: self-signed
              config:
                name: ""
                path: ""
              extraArgs: []
              extraEnvs: []
              faults:
                delay: false
                error: false
                testFail: false
                testTimeout: false
                unhealthy: false
                unready: false
              h2c:
                enabled: false
              hpa:
                enabled: false
                maxReplicas: 10
              image:
                pullPolicy: IfNotPresent
                repository: quay.io/holos/stefanprodan/podinfo
                tag: 6.7.0
              ingress:
                additionalLabels: {}
                annotations: {}
                className: ""
                enabled: false
                hosts:
                  - host: podinfo.local
                    paths:
                      - path: /
                        pathType: ImplementationSpecific
                tls: []
              linkerd:
                profile:
                  enabled: false
              logLevel: info
              nodeSelector: {}
              podAnnotations: {}
              podDisruptionBudget: {}
              probes:
                liveness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                readiness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                startup:
                  enable: false
                  failureThreshold: 20
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
              redis:
                enabled: false
                repository: redis
                tag: 7.0.7
              replicaCount: 1
              resources:
                requests:
                  cpu: 1m
                  memory: 16Mi
              securityContext: {}
              service:
                annotations: {}
                enabled: true
                externalPort: 9898
                grpcPort: 9999
                grpcService: podinfo
                httpPort: 9898
                metricsPort: 9797
                nodePort: 31198
                type: ClusterIP
              serviceAccount:
                enabled: false
                imagePullSecrets: []
              serviceMonitor:
                additionalLabels: {}
                enabled: false
                interval: 15s
              tls:
                certPath: /data/cert
                enabled: false
                port: 9899
              tolerations: []
              topologySpreadConstraints: []
              ui:
                color: '#34577c'
                logo: ""
                message: 'Hello! Stage: test'
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: test-podinfo
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: projects/podinfo/components/test-podinfo/test-podinfo.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: podinfo-test-podinfo
              namespace: test-podinfo
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: projects/podinfo/gitops/test-podinfo.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/gitops/test-podinfo.application.gen.yaml
          resources:
            Application:
              podinfo-test-podinfo:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: podinfo:test
                  labels:
                    stage: test
                    tier: nonprod
                  name: podinfo-test-podinfo
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: podinfo
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/podinfo/component/test-podinfo
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: uat-podinfo
  labels:
    holos.run/component.name: uat-podinfo
    holos.run/project.name: podinfo
    holos.run/stack.name: podinfo
  annotations:
    app.holos.run/description: uat-podinfo for project podinfo
spec:
  artifacts:
    - artifact: projects/podinfo/components/uat-podinfo/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/components/uat-podinfo/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - uat-podinfo.gen.yaml
    - artifact: projects/podinfo/components/uat-podinfo/uat-podinfo.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: oci://ghcr.io/stefanprodan/charts/podinfo
              version: 6.7.0
              release: podinfo
            values:
              affinity: {}
              backends: []
              cache: ""
              certificate:
                create: false
                dnsNames:
                  - podinfo
                issuerRef:
                  kind: ClusterIssuer
                  name: self-signed
              config:
                name: ""
                path: ""
              extraArgs: []
              extraEnvs: []
              faults:
                delay: false
                error: false
                testFail: false
                testTimeout: false
                unhealthy: false
                unready: false
              h2c:
                enabled: false
              hpa:
                enabled: false
                maxReplicas: 10
              image:
                pullPolicy: IfNotPresent
                repository: quay.io/holos/stefanprodan/podinfo
                tag: 6.7.0
              ingress:
                additionalLabels: {}
                annotations: {}
                className: ""
                enabled: false
                hosts:
                  - host: podinfo.local
                    paths:
                      - path: /
                        pathType: ImplementationSpecific
                tls: []
              linkerd:
                profile:
                  enabled: false
              logLevel: info
              nodeSelector: {}
              podAnnotations: {}
              podDisruptionBudget: {}
              probes:
                liveness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                readiness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                startup:
                  enable: false
                  failureThreshold: 20
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
              redis:
                enabled: false
                repository: redis
                tag: 7.0.7
              replicaCount: 1
              resources:
                requests:
                  cpu: 1m
                  memory: 16Mi
              securityContext: {}
              service:
                annotations: {}
                enabled: true
                externalPort: 9898
                grpcPort: 9999
                grpcService: podinfo
                httpPort: 9898
                metricsPort: 9797
                nodePort: 31198
                type: ClusterIP
              serviceAccount:
                enabled: false
                imagePullSecrets: []
              serviceMonitor:
                additionalLabels: {}
                enabled: false
                interval: 15s
              tls:
                certPath: /data/cert
                enabled: false
                port: 9899
              tolerations: []
              topologySpreadConstraints: []
              ui:
                color: '#34577c'
                logo: ""
                message: 'Hello! Stage: uat'
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: uat-podinfo
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: projects/podinfo/components/uat-podinfo/uat-podinfo.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: podinfo-uat-podinfo
              namespace: uat-podinfo
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: projects/podinfo/gitops/uat-podinfo.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/gitops/uat-podinfo.application.gen.yaml
          resources:
            Application:
              podinfo-uat-podinfo:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: podinfo:uat
                  labels:
                    stage: uat
                    tier: nonprod
                  name: podinfo-uat-podinfo
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: podinfo
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/podinfo/component/uat-podinfo
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: prod-us-east-podinfo
  labels:
    holos.run/component.name: prod-us-east-podinfo
    holos.run/project.name: podinfo
    holos.run/stack.name: podinfo
  annotations:
    app.holos.run/description: prod-us-east-podinfo for project podinfo
spec:
  artifacts:
    - artifact: projects/podinfo/components/prod-us-east-podinfo/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/components/prod-us-east-podinfo/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - prod-us-east-podinfo.gen.yaml
    - artifact: projects/podinfo/components/prod-us-east-podinfo/prod-us-east-podinfo.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: oci://ghcr.io/stefanprodan/charts/podinfo
              version: 6.6.1
              release: podinfo
            values:
              affinity: {}
              backends: []
              cache: ""
              certificate:
                create: false
                dnsNames:
                  - podinfo
                issuerRef:
                  kind: ClusterIssuer
                  name: self-signed
              config:
                name: ""
                path: ""
              extraArgs: []
              extraEnvs: []
              faults:
                delay: false
                error: false
                testFail: false
                testTimeout: false
                unhealthy: false
                unready: false
              h2c:
                enabled: false
              hpa:
                enabled: false
                maxReplicas: 10
              image:
                pullPolicy: IfNotPresent
                repository: quay.io/holos/stefanprodan/podinfo
                tag: 6.6.1
              ingress:
                additionalLabels: {}
                annotations: {}
                className: ""
                enabled: false
                hosts:
                  - host: podinfo.local
                    paths:
                      - path: /
                        pathType: ImplementationSpecific
                tls: []
              linkerd:
                profile:
                  enabled: false
              logLevel: info
              nodeSelector: {}
              podAnnotations: {}
              podDisruptionBudget: {}
              probes:
                liveness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                readiness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                startup:
                  enable: false
                  failureThreshold: 20
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
              redis:
                enabled: false
                repository: redis
                tag: 7.0.7
              replicaCount: 2
              resources:
                requests:
                  cpu: 1m
                  memory: 16Mi
              securityContext: {}
              service:
                annotations: {}
                enabled: true
                externalPort: 9898
                grpcPort: 9999
                grpcService: podinfo
                httpPort: 9898
                metricsPort: 9797
                nodePort: 31198
                type: ClusterIP
              serviceAccount:
                enabled: false
                imagePullSecrets: []
              serviceMonitor:
                additionalLabels: {}
                enabled: false
                interval: 15s
              tls:
                certPath: /data/cert
                enabled: false
                port: 9899
              tolerations: []
              topologySpreadConstraints: []
              ui:
                color: '#34577c'
                logo: ""
                message: 'Hello! Stage: prod-us-east'
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: prod-us-east-podinfo
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: projects/podinfo/components/prod-us-east-podinfo/prod-us-east-podinfo.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: podinfo-prod-us-east-podinfo
              namespace: prod-us-east-podinfo
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: projects/podinfo/gitops/prod-us-east-podinfo.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/gitops/prod-us-east-podinfo.application.gen.yaml
          resources:
            Application:
              podinfo-prod-us-east-podinfo:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: podinfo:prod-us-east
                  labels:
                    stage: prod-us-east
                    tier: prod
                  name: podinfo-prod-us-east-podinfo
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: podinfo
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/podinfo/component/prod-us-east-podinfo
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: prod-us-central-podinfo
  labels:
    holos.run/component.name: prod-us-central-podinfo
    holos.run/project.name: podinfo
    holos.run/stack.name: podinfo
  annotations:
    app.holos.run/description: prod-us-central-podinfo for project podinfo
spec:
  artifacts:
    - artifact: projects/podinfo/components/prod-us-central-podinfo/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/components/prod-us-central-podinfo/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - prod-us-central-podinfo.gen.yaml
    - artifact: projects/podinfo/components/prod-us-central-podinfo/prod-us-central-podinfo.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: oci://ghcr.io/stefanprodan/charts/podinfo
              version: 6.6.2
              release: podinfo
            values:
              affinity: {}
              backends: []
              cache: ""
              certificate:
                create: false
                dnsNames:
                  - podinfo
                issuerRef:
                  kind: ClusterIssuer
                  name: self-signed
              config:
                name: ""
                path: ""
              extraArgs: []
              extraEnvs: []
              faults:
                delay: false
                error: false
                testFail: false
                testTimeout: false
                unhealthy: false
                unready: false
              h2c:
                enabled: false
              hpa:
                enabled: false
                maxReplicas: 10
              image:
                pullPolicy: IfNotPresent
                repository: quay.io/holos/stefanprodan/podinfo
                tag: 6.6.2
              ingress:
                additionalLabels: {}
                annotations: {}
                className: ""
                enabled: false
                hosts:
                  - host: podinfo.local
                    paths:
                      - path: /
                        pathType: ImplementationSpecific
                tls: []
              linkerd:
                profile:
                  enabled: false
              logLevel: info
              nodeSelector: {}
              podAnnotations: {}
              podDisruptionBudget: {}
              probes:
                liveness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                readiness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                startup:
                  enable: false
                  failureThreshold: 20
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
              redis:
                enabled: false
                repository: redis
                tag: 7.0.7
              replicaCount: 2
              resources:
                requests:
                  cpu: 1m
                  memory: 16Mi
              securityContext: {}
              service:
                annotations: {}
                enabled: true
                externalPort: 9898
                grpcPort: 9999
                grpcService: podinfo
                httpPort: 9898
                metricsPort: 9797
                nodePort: 31198
                type: ClusterIP
              serviceAccount:
                enabled: false
                imagePullSecrets: []
              serviceMonitor:
                additionalLabels: {}
                enabled: false
                interval: 15s
              tls:
                certPath: /data/cert
                enabled: false
                port: 9899
              tolerations: []
              topologySpreadConstraints: []
              ui:
                color: '#34577c'
                logo: ""
                message: 'Hello! Stage: prod-us-central'
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: prod-us-central-podinfo
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: projects/podinfo/components/prod-us-central-podinfo/prod-us-central-podinfo.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: podinfo-prod-us-central-podinfo
              namespace: prod-us-central-podinfo
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: projects/podinfo/gitops/prod-us-central-podinfo.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/gitops/prod-us-central-podinfo.application.gen.yaml
          resources:
            Application:
              podinfo-prod-us-central-podinfo:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: podinfo:prod-us-central
                  labels:
                    stage: prod-us-central
                    tier: prod
                  name: podinfo-prod-us-central-podinfo
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: podinfo
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/podinfo/component/prod-us-central-podinfo
---
kind: BuildPlan
apiVersion: v1alpha5
metadata:
  name: prod-us-west-podinfo
  labels:
    holos.run/component.name: prod-us-west-podinfo
    holos.run/project.name: podinfo
    holos.run/stack.name: podinfo
  annotations:
    app.holos.run/description: prod-us-west-podinfo for project podinfo
spec:
  artifacts:
    - artifact: projects/podinfo/components/prod-us-west-podinfo/kustomization.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/components/prod-us-west-podinfo/kustomization.yaml
          resources:
            Kustomization:
              kargo:
                resources:
                  - prod-us-west-podinfo.gen.yaml
    - artifact: projects/podinfo/components/prod-us-west-podinfo/prod-us-west-podinfo.gen.yaml
      generators:
        - kind: Helm
          output: helm.gen.yaml
          helm:
            chart:
              name: oci://ghcr.io/stefanprodan/charts/podinfo
              version: 6.7.0
              release: podinfo
            values:
              affinity: {}
              backends: []
              cache: ""
              certificate:
                create: false
                dnsNames:
                  - podinfo
                issuerRef:
                  kind: ClusterIssuer
                  name: self-signed
              config:
                name: ""
                path: ""
              extraArgs: []
              extraEnvs: []
              faults:
                delay: false
                error: false
                testFail: false
                testTimeout: false
                unhealthy: false
                unready: false
              h2c:
                enabled: false
              hpa:
                enabled: false
                maxReplicas: 10
              image:
                pullPolicy: IfNotPresent
                repository: quay.io/holos/stefanprodan/podinfo
                tag: 6.7.0
              ingress:
                additionalLabels: {}
                annotations: {}
                className: ""
                enabled: false
                hosts:
                  - host: podinfo.local
                    paths:
                      - path: /
                        pathType: ImplementationSpecific
                tls: []
              linkerd:
                profile:
                  enabled: false
              logLevel: info
              nodeSelector: {}
              podAnnotations: {}
              podDisruptionBudget: {}
              probes:
                liveness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                readiness:
                  failureThreshold: 3
                  initialDelaySeconds: 1
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                startup:
                  enable: false
                  failureThreshold: 20
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
              redis:
                enabled: false
                repository: redis
                tag: 7.0.7
              replicaCount: 2
              resources:
                requests:
                  cpu: 1m
                  memory: 16Mi
              securityContext: {}
              service:
                annotations: {}
                enabled: true
                externalPort: 9898
                grpcPort: 9999
                grpcService: podinfo
                httpPort: 9898
                metricsPort: 9797
                nodePort: 31198
                type: ClusterIP
              serviceAccount:
                enabled: false
                imagePullSecrets: []
              serviceMonitor:
                additionalLabels: {}
                enabled: false
                interval: 15s
              tls:
                certPath: /data/cert
                enabled: false
                port: 9899
              tolerations: []
              topologySpreadConstraints: []
              ui:
                color: '#34577c'
                logo: ""
                message: 'Hello! Stage: prod-us-west'
        - kind: Resources
          output: resources.gen.yaml
          resources:
            ReferenceGrant:
              istio-ingress:
                apiVersion: gateway.networking.k8s.io/v1beta1
                kind: ReferenceGrant
                metadata:
                  name: istio-ingress
                  namespace: prod-us-west-podinfo
                spec:
                  from:
                    - group: gateway.networking.k8s.io
                      kind: HTTPRoute
                      namespace: istio-ingress
                  to:
                    - group: ""
                      kind: Service
      transformers:
        - kind: Kustomize
          inputs:
            - helm.gen.yaml
            - resources.gen.yaml
          output: projects/podinfo/components/prod-us-west-podinfo/prod-us-west-podinfo.gen.yaml
          kustomize:
            kustomization:
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              labels:
                - includeSelectors: false
                  pairs:
                    argocd.argoproj.io/instance: podinfo-prod-us-west-podinfo
              namespace: prod-us-west-podinfo
              resources:
                - helm.gen.yaml
                - resources.gen.yaml
    - artifact: projects/podinfo/gitops/prod-us-west-podinfo.application.gen.yaml
      generators:
        - kind: Resources
          output: projects/podinfo/gitops/prod-us-west-podinfo.application.gen.yaml
          resources:
            Application:
              podinfo-prod-us-west-podinfo:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  annotations:
                    kargo.akuity.io/authorized-stage: podinfo:prod-us-west
                  labels:
                    stage: prod-us-west
                    tier: prod
                  name: podinfo-prod-us-west-podinfo
                  namespace: argocd
                spec:
                  destination:
                    server: https://kubernetes.default.svc
                  project: podinfo
                  source:
                    path: ./
                    repoURL: https://github.com/holos-run/kargo-demo.git
                    targetRevision: project/podinfo/component/prod-us-west-podinfo
