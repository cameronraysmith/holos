// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: holos/v1alpha1/holos.proto

package holosconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/holos-run/holos/internal/server/service/gen/holos/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// HolosServiceName is the fully-qualified name of the HolosService service.
	HolosServiceName = "holos.v1alpha1.HolosService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HolosServiceGetUserClaimsProcedure is the fully-qualified name of the HolosService's
	// GetUserClaims RPC.
	HolosServiceGetUserClaimsProcedure = "/holos.v1alpha1.HolosService/GetUserClaims"
	// HolosServiceRegisterUserProcedure is the fully-qualified name of the HolosService's RegisterUser
	// RPC.
	HolosServiceRegisterUserProcedure = "/holos.v1alpha1.HolosService/RegisterUser"
)

// HolosServiceClient is a client for the holos.v1alpha1.HolosService service.
type HolosServiceClient interface {
	GetUserClaims(context.Context, *connect.Request[v1alpha1.GetUserClaimsRequest]) (*connect.Response[v1alpha1.GetUserClaimsResponse], error)
	RegisterUser(context.Context, *connect.Request[v1alpha1.RegisterUserRequest]) (*connect.Response[v1alpha1.RegisterUserResponse], error)
}

// NewHolosServiceClient constructs a client for the holos.v1alpha1.HolosService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHolosServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HolosServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &holosServiceClient{
		getUserClaims: connect.NewClient[v1alpha1.GetUserClaimsRequest, v1alpha1.GetUserClaimsResponse](
			httpClient,
			baseURL+HolosServiceGetUserClaimsProcedure,
			opts...,
		),
		registerUser: connect.NewClient[v1alpha1.RegisterUserRequest, v1alpha1.RegisterUserResponse](
			httpClient,
			baseURL+HolosServiceRegisterUserProcedure,
			opts...,
		),
	}
}

// holosServiceClient implements HolosServiceClient.
type holosServiceClient struct {
	getUserClaims *connect.Client[v1alpha1.GetUserClaimsRequest, v1alpha1.GetUserClaimsResponse]
	registerUser  *connect.Client[v1alpha1.RegisterUserRequest, v1alpha1.RegisterUserResponse]
}

// GetUserClaims calls holos.v1alpha1.HolosService.GetUserClaims.
func (c *holosServiceClient) GetUserClaims(ctx context.Context, req *connect.Request[v1alpha1.GetUserClaimsRequest]) (*connect.Response[v1alpha1.GetUserClaimsResponse], error) {
	return c.getUserClaims.CallUnary(ctx, req)
}

// RegisterUser calls holos.v1alpha1.HolosService.RegisterUser.
func (c *holosServiceClient) RegisterUser(ctx context.Context, req *connect.Request[v1alpha1.RegisterUserRequest]) (*connect.Response[v1alpha1.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// HolosServiceHandler is an implementation of the holos.v1alpha1.HolosService service.
type HolosServiceHandler interface {
	GetUserClaims(context.Context, *connect.Request[v1alpha1.GetUserClaimsRequest]) (*connect.Response[v1alpha1.GetUserClaimsResponse], error)
	RegisterUser(context.Context, *connect.Request[v1alpha1.RegisterUserRequest]) (*connect.Response[v1alpha1.RegisterUserResponse], error)
}

// NewHolosServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHolosServiceHandler(svc HolosServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	holosServiceGetUserClaimsHandler := connect.NewUnaryHandler(
		HolosServiceGetUserClaimsProcedure,
		svc.GetUserClaims,
		opts...,
	)
	holosServiceRegisterUserHandler := connect.NewUnaryHandler(
		HolosServiceRegisterUserProcedure,
		svc.RegisterUser,
		opts...,
	)
	return "/holos.v1alpha1.HolosService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HolosServiceGetUserClaimsProcedure:
			holosServiceGetUserClaimsHandler.ServeHTTP(w, r)
		case HolosServiceRegisterUserProcedure:
			holosServiceRegisterUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHolosServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHolosServiceHandler struct{}

func (UnimplementedHolosServiceHandler) GetUserClaims(context.Context, *connect.Request[v1alpha1.GetUserClaimsRequest]) (*connect.Response[v1alpha1.GetUserClaimsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("holos.v1alpha1.HolosService.GetUserClaims is not implemented"))
}

func (UnimplementedHolosServiceHandler) RegisterUser(context.Context, *connect.Request[v1alpha1.RegisterUserRequest]) (*connect.Response[v1alpha1.RegisterUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("holos.v1alpha1.HolosService.RegisterUser is not implemented"))
}
