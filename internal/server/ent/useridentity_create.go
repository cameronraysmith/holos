// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/holos-run/holos/internal/server/ent/user"
	"github.com/holos-run/holos/internal/server/ent/useridentity"
)

// UserIdentityCreate is the builder for creating a UserIdentity entity.
type UserIdentityCreate struct {
	config
	mutation *UserIdentityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uic *UserIdentityCreate) SetCreatedAt(t time.Time) *UserIdentityCreate {
	uic.mutation.SetCreatedAt(t)
	return uic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uic *UserIdentityCreate) SetNillableCreatedAt(t *time.Time) *UserIdentityCreate {
	if t != nil {
		uic.SetCreatedAt(*t)
	}
	return uic
}

// SetUpdatedAt sets the "updated_at" field.
func (uic *UserIdentityCreate) SetUpdatedAt(t time.Time) *UserIdentityCreate {
	uic.mutation.SetUpdatedAt(t)
	return uic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uic *UserIdentityCreate) SetNillableUpdatedAt(t *time.Time) *UserIdentityCreate {
	if t != nil {
		uic.SetUpdatedAt(*t)
	}
	return uic
}

// SetIss sets the "iss" field.
func (uic *UserIdentityCreate) SetIss(s string) *UserIdentityCreate {
	uic.mutation.SetIss(s)
	return uic
}

// SetSub sets the "sub" field.
func (uic *UserIdentityCreate) SetSub(s string) *UserIdentityCreate {
	uic.mutation.SetSub(s)
	return uic
}

// SetEmail sets the "email" field.
func (uic *UserIdentityCreate) SetEmail(s string) *UserIdentityCreate {
	uic.mutation.SetEmail(s)
	return uic
}

// SetEmailVerified sets the "email_verified" field.
func (uic *UserIdentityCreate) SetEmailVerified(b bool) *UserIdentityCreate {
	uic.mutation.SetEmailVerified(b)
	return uic
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uic *UserIdentityCreate) SetNillableEmailVerified(b *bool) *UserIdentityCreate {
	if b != nil {
		uic.SetEmailVerified(*b)
	}
	return uic
}

// SetName sets the "name" field.
func (uic *UserIdentityCreate) SetName(s string) *UserIdentityCreate {
	uic.mutation.SetName(s)
	return uic
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uic *UserIdentityCreate) SetNillableName(s *string) *UserIdentityCreate {
	if s != nil {
		uic.SetName(*s)
	}
	return uic
}

// SetID sets the "id" field.
func (uic *UserIdentityCreate) SetID(u uuid.UUID) *UserIdentityCreate {
	uic.mutation.SetID(u)
	return uic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uic *UserIdentityCreate) SetNillableID(u *uuid.UUID) *UserIdentityCreate {
	if u != nil {
		uic.SetID(*u)
	}
	return uic
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uic *UserIdentityCreate) SetUserID(id uuid.UUID) *UserIdentityCreate {
	uic.mutation.SetUserID(id)
	return uic
}

// SetUser sets the "user" edge to the User entity.
func (uic *UserIdentityCreate) SetUser(u *User) *UserIdentityCreate {
	return uic.SetUserID(u.ID)
}

// Mutation returns the UserIdentityMutation object of the builder.
func (uic *UserIdentityCreate) Mutation() *UserIdentityMutation {
	return uic.mutation
}

// Save creates the UserIdentity in the database.
func (uic *UserIdentityCreate) Save(ctx context.Context) (*UserIdentity, error) {
	uic.defaults()
	return withHooks(ctx, uic.sqlSave, uic.mutation, uic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uic *UserIdentityCreate) SaveX(ctx context.Context) *UserIdentity {
	v, err := uic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uic *UserIdentityCreate) Exec(ctx context.Context) error {
	_, err := uic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uic *UserIdentityCreate) ExecX(ctx context.Context) {
	if err := uic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uic *UserIdentityCreate) defaults() {
	if _, ok := uic.mutation.CreatedAt(); !ok {
		v := useridentity.DefaultCreatedAt()
		uic.mutation.SetCreatedAt(v)
	}
	if _, ok := uic.mutation.UpdatedAt(); !ok {
		v := useridentity.DefaultUpdatedAt()
		uic.mutation.SetUpdatedAt(v)
	}
	if _, ok := uic.mutation.EmailVerified(); !ok {
		v := useridentity.DefaultEmailVerified
		uic.mutation.SetEmailVerified(v)
	}
	if _, ok := uic.mutation.ID(); !ok {
		v := useridentity.DefaultID()
		uic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uic *UserIdentityCreate) check() error {
	if _, ok := uic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserIdentity.created_at"`)}
	}
	if _, ok := uic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserIdentity.updated_at"`)}
	}
	if _, ok := uic.mutation.Iss(); !ok {
		return &ValidationError{Name: "iss", err: errors.New(`ent: missing required field "UserIdentity.iss"`)}
	}
	if v, ok := uic.mutation.Iss(); ok {
		if err := useridentity.IssValidator(v); err != nil {
			return &ValidationError{Name: "iss", err: fmt.Errorf(`ent: validator failed for field "UserIdentity.iss": %w`, err)}
		}
	}
	if _, ok := uic.mutation.Sub(); !ok {
		return &ValidationError{Name: "sub", err: errors.New(`ent: missing required field "UserIdentity.sub"`)}
	}
	if v, ok := uic.mutation.Sub(); ok {
		if err := useridentity.SubValidator(v); err != nil {
			return &ValidationError{Name: "sub", err: fmt.Errorf(`ent: validator failed for field "UserIdentity.sub": %w`, err)}
		}
	}
	if _, ok := uic.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "UserIdentity.email"`)}
	}
	if v, ok := uic.mutation.Email(); ok {
		if err := useridentity.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "UserIdentity.email": %w`, err)}
		}
	}
	if _, ok := uic.mutation.EmailVerified(); !ok {
		return &ValidationError{Name: "email_verified", err: errors.New(`ent: missing required field "UserIdentity.email_verified"`)}
	}
	if _, ok := uic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserIdentity.user"`)}
	}
	return nil
}

func (uic *UserIdentityCreate) sqlSave(ctx context.Context) (*UserIdentity, error) {
	if err := uic.check(); err != nil {
		return nil, err
	}
	_node, _spec := uic.createSpec()
	if err := sqlgraph.CreateNode(ctx, uic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uic.mutation.id = &_node.ID
	uic.mutation.done = true
	return _node, nil
}

func (uic *UserIdentityCreate) createSpec() (*UserIdentity, *sqlgraph.CreateSpec) {
	var (
		_node = &UserIdentity{config: uic.config}
		_spec = sqlgraph.NewCreateSpec(useridentity.Table, sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = uic.conflict
	if id, ok := uic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uic.mutation.CreatedAt(); ok {
		_spec.SetField(useridentity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uic.mutation.UpdatedAt(); ok {
		_spec.SetField(useridentity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uic.mutation.Iss(); ok {
		_spec.SetField(useridentity.FieldIss, field.TypeString, value)
		_node.Iss = value
	}
	if value, ok := uic.mutation.Sub(); ok {
		_spec.SetField(useridentity.FieldSub, field.TypeString, value)
		_node.Sub = value
	}
	if value, ok := uic.mutation.Email(); ok {
		_spec.SetField(useridentity.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uic.mutation.EmailVerified(); ok {
		_spec.SetField(useridentity.FieldEmailVerified, field.TypeBool, value)
		_node.EmailVerified = value
	}
	if value, ok := uic.mutation.Name(); ok {
		_spec.SetField(useridentity.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if nodes := uic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useridentity.UserTable,
			Columns: []string{useridentity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserIdentity.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserIdentityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uic *UserIdentityCreate) OnConflict(opts ...sql.ConflictOption) *UserIdentityUpsertOne {
	uic.conflict = opts
	return &UserIdentityUpsertOne{
		create: uic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserIdentity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uic *UserIdentityCreate) OnConflictColumns(columns ...string) *UserIdentityUpsertOne {
	uic.conflict = append(uic.conflict, sql.ConflictColumns(columns...))
	return &UserIdentityUpsertOne{
		create: uic,
	}
}

type (
	// UserIdentityUpsertOne is the builder for "upsert"-ing
	//  one UserIdentity node.
	UserIdentityUpsertOne struct {
		create *UserIdentityCreate
	}

	// UserIdentityUpsert is the "OnConflict" setter.
	UserIdentityUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserIdentityUpsert) SetUpdatedAt(v time.Time) *UserIdentityUpsert {
	u.Set(useridentity.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserIdentityUpsert) UpdateUpdatedAt() *UserIdentityUpsert {
	u.SetExcluded(useridentity.FieldUpdatedAt)
	return u
}

// SetIss sets the "iss" field.
func (u *UserIdentityUpsert) SetIss(v string) *UserIdentityUpsert {
	u.Set(useridentity.FieldIss, v)
	return u
}

// UpdateIss sets the "iss" field to the value that was provided on create.
func (u *UserIdentityUpsert) UpdateIss() *UserIdentityUpsert {
	u.SetExcluded(useridentity.FieldIss)
	return u
}

// SetSub sets the "sub" field.
func (u *UserIdentityUpsert) SetSub(v string) *UserIdentityUpsert {
	u.Set(useridentity.FieldSub, v)
	return u
}

// UpdateSub sets the "sub" field to the value that was provided on create.
func (u *UserIdentityUpsert) UpdateSub() *UserIdentityUpsert {
	u.SetExcluded(useridentity.FieldSub)
	return u
}

// SetEmail sets the "email" field.
func (u *UserIdentityUpsert) SetEmail(v string) *UserIdentityUpsert {
	u.Set(useridentity.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserIdentityUpsert) UpdateEmail() *UserIdentityUpsert {
	u.SetExcluded(useridentity.FieldEmail)
	return u
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserIdentityUpsert) SetEmailVerified(v bool) *UserIdentityUpsert {
	u.Set(useridentity.FieldEmailVerified, v)
	return u
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserIdentityUpsert) UpdateEmailVerified() *UserIdentityUpsert {
	u.SetExcluded(useridentity.FieldEmailVerified)
	return u
}

// SetName sets the "name" field.
func (u *UserIdentityUpsert) SetName(v string) *UserIdentityUpsert {
	u.Set(useridentity.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserIdentityUpsert) UpdateName() *UserIdentityUpsert {
	u.SetExcluded(useridentity.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *UserIdentityUpsert) ClearName() *UserIdentityUpsert {
	u.SetNull(useridentity.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserIdentity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(useridentity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserIdentityUpsertOne) UpdateNewValues() *UserIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(useridentity.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(useridentity.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserIdentity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserIdentityUpsertOne) Ignore() *UserIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserIdentityUpsertOne) DoNothing() *UserIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserIdentityCreate.OnConflict
// documentation for more info.
func (u *UserIdentityUpsertOne) Update(set func(*UserIdentityUpsert)) *UserIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserIdentityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserIdentityUpsertOne) SetUpdatedAt(v time.Time) *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserIdentityUpsertOne) UpdateUpdatedAt() *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetIss sets the "iss" field.
func (u *UserIdentityUpsertOne) SetIss(v string) *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetIss(v)
	})
}

// UpdateIss sets the "iss" field to the value that was provided on create.
func (u *UserIdentityUpsertOne) UpdateIss() *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateIss()
	})
}

// SetSub sets the "sub" field.
func (u *UserIdentityUpsertOne) SetSub(v string) *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetSub(v)
	})
}

// UpdateSub sets the "sub" field to the value that was provided on create.
func (u *UserIdentityUpsertOne) UpdateSub() *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateSub()
	})
}

// SetEmail sets the "email" field.
func (u *UserIdentityUpsertOne) SetEmail(v string) *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserIdentityUpsertOne) UpdateEmail() *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateEmail()
	})
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserIdentityUpsertOne) SetEmailVerified(v bool) *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetEmailVerified(v)
	})
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserIdentityUpsertOne) UpdateEmailVerified() *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateEmailVerified()
	})
}

// SetName sets the "name" field.
func (u *UserIdentityUpsertOne) SetName(v string) *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserIdentityUpsertOne) UpdateName() *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserIdentityUpsertOne) ClearName() *UserIdentityUpsertOne {
	return u.Update(func(s *UserIdentityUpsert) {
		s.ClearName()
	})
}

// Exec executes the query.
func (u *UserIdentityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserIdentityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserIdentityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserIdentityUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserIdentityUpsertOne.ID is not supported by MySQL driver. Use UserIdentityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserIdentityUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserIdentityCreateBulk is the builder for creating many UserIdentity entities in bulk.
type UserIdentityCreateBulk struct {
	config
	err      error
	builders []*UserIdentityCreate
	conflict []sql.ConflictOption
}

// Save creates the UserIdentity entities in the database.
func (uicb *UserIdentityCreateBulk) Save(ctx context.Context) ([]*UserIdentity, error) {
	if uicb.err != nil {
		return nil, uicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uicb.builders))
	nodes := make([]*UserIdentity, len(uicb.builders))
	mutators := make([]Mutator, len(uicb.builders))
	for i := range uicb.builders {
		func(i int, root context.Context) {
			builder := uicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserIdentityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uicb *UserIdentityCreateBulk) SaveX(ctx context.Context) []*UserIdentity {
	v, err := uicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uicb *UserIdentityCreateBulk) Exec(ctx context.Context) error {
	_, err := uicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uicb *UserIdentityCreateBulk) ExecX(ctx context.Context) {
	if err := uicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserIdentity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserIdentityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uicb *UserIdentityCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserIdentityUpsertBulk {
	uicb.conflict = opts
	return &UserIdentityUpsertBulk{
		create: uicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserIdentity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uicb *UserIdentityCreateBulk) OnConflictColumns(columns ...string) *UserIdentityUpsertBulk {
	uicb.conflict = append(uicb.conflict, sql.ConflictColumns(columns...))
	return &UserIdentityUpsertBulk{
		create: uicb,
	}
}

// UserIdentityUpsertBulk is the builder for "upsert"-ing
// a bulk of UserIdentity nodes.
type UserIdentityUpsertBulk struct {
	create *UserIdentityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserIdentity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(useridentity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserIdentityUpsertBulk) UpdateNewValues() *UserIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(useridentity.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(useridentity.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserIdentity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserIdentityUpsertBulk) Ignore() *UserIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserIdentityUpsertBulk) DoNothing() *UserIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserIdentityCreateBulk.OnConflict
// documentation for more info.
func (u *UserIdentityUpsertBulk) Update(set func(*UserIdentityUpsert)) *UserIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserIdentityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserIdentityUpsertBulk) SetUpdatedAt(v time.Time) *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserIdentityUpsertBulk) UpdateUpdatedAt() *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetIss sets the "iss" field.
func (u *UserIdentityUpsertBulk) SetIss(v string) *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetIss(v)
	})
}

// UpdateIss sets the "iss" field to the value that was provided on create.
func (u *UserIdentityUpsertBulk) UpdateIss() *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateIss()
	})
}

// SetSub sets the "sub" field.
func (u *UserIdentityUpsertBulk) SetSub(v string) *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetSub(v)
	})
}

// UpdateSub sets the "sub" field to the value that was provided on create.
func (u *UserIdentityUpsertBulk) UpdateSub() *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateSub()
	})
}

// SetEmail sets the "email" field.
func (u *UserIdentityUpsertBulk) SetEmail(v string) *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserIdentityUpsertBulk) UpdateEmail() *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateEmail()
	})
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserIdentityUpsertBulk) SetEmailVerified(v bool) *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetEmailVerified(v)
	})
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserIdentityUpsertBulk) UpdateEmailVerified() *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateEmailVerified()
	})
}

// SetName sets the "name" field.
func (u *UserIdentityUpsertBulk) SetName(v string) *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserIdentityUpsertBulk) UpdateName() *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserIdentityUpsertBulk) ClearName() *UserIdentityUpsertBulk {
	return u.Update(func(s *UserIdentityUpsert) {
		s.ClearName()
	})
}

// Exec executes the query.
func (u *UserIdentityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserIdentityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserIdentityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserIdentityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
