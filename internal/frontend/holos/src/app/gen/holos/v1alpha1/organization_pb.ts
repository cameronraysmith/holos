// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file holos/v1alpha1/organization.proto (package holos.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Timestamps } from "./timestamps_pb.js";
import { Creator, User } from "./user_pb.js";

/**
 * @generated from message holos.v1alpha1.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * Unique id assigned by the server.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * @generated from field: holos.v1alpha1.Timestamps timestamps = 4;
   */
  timestamps?: Timestamps;

  /**
   * @generated from field: holos.v1alpha1.Creator creator = 5;
   */
  creator?: Creator;

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamps", kind: "message", T: Timestamps },
    { no: 5, name: "creator", kind: "message", T: Creator },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.ListCallerOrganizationsRequest
 */
export class ListCallerOrganizationsRequest extends Message<ListCallerOrganizationsRequest> {
  constructor(data?: PartialMessage<ListCallerOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.ListCallerOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCallerOrganizationsRequest {
    return new ListCallerOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCallerOrganizationsRequest {
    return new ListCallerOrganizationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCallerOrganizationsRequest {
    return new ListCallerOrganizationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCallerOrganizationsRequest | PlainMessage<ListCallerOrganizationsRequest> | undefined, b: ListCallerOrganizationsRequest | PlainMessage<ListCallerOrganizationsRequest> | undefined): boolean {
    return proto3.util.equals(ListCallerOrganizationsRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.ListCallerOrganizationsResponse
 */
export class ListCallerOrganizationsResponse extends Message<ListCallerOrganizationsResponse> {
  /**
   * @generated from field: holos.v1alpha1.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: repeated holos.v1alpha1.Organization organizations = 2;
   */
  organizations: Organization[] = [];

  constructor(data?: PartialMessage<ListCallerOrganizationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.ListCallerOrganizationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "organizations", kind: "message", T: Organization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCallerOrganizationsResponse {
    return new ListCallerOrganizationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCallerOrganizationsResponse {
    return new ListCallerOrganizationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCallerOrganizationsResponse {
    return new ListCallerOrganizationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCallerOrganizationsResponse | PlainMessage<ListCallerOrganizationsResponse> | undefined, b: ListCallerOrganizationsResponse | PlainMessage<ListCallerOrganizationsResponse> | undefined): boolean {
    return proto3.util.equals(ListCallerOrganizationsResponse, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.CreateCallerOrganizationRequest
 */
export class CreateCallerOrganizationRequest extends Message<CreateCallerOrganizationRequest> {
  constructor(data?: PartialMessage<CreateCallerOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.CreateCallerOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCallerOrganizationRequest {
    return new CreateCallerOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCallerOrganizationRequest {
    return new CreateCallerOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCallerOrganizationRequest {
    return new CreateCallerOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCallerOrganizationRequest | PlainMessage<CreateCallerOrganizationRequest> | undefined, b: CreateCallerOrganizationRequest | PlainMessage<CreateCallerOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(CreateCallerOrganizationRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.CreateCallerOrganizationResponse
 */
export class CreateCallerOrganizationResponse extends Message<CreateCallerOrganizationResponse> {
  /**
   * @generated from field: holos.v1alpha1.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: repeated holos.v1alpha1.Organization organizations = 2;
   */
  organizations: Organization[] = [];

  constructor(data?: PartialMessage<CreateCallerOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.CreateCallerOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "organizations", kind: "message", T: Organization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCallerOrganizationResponse {
    return new CreateCallerOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCallerOrganizationResponse {
    return new CreateCallerOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCallerOrganizationResponse {
    return new CreateCallerOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCallerOrganizationResponse | PlainMessage<CreateCallerOrganizationResponse> | undefined, b: CreateCallerOrganizationResponse | PlainMessage<CreateCallerOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(CreateCallerOrganizationResponse, a, b);
  }
}

