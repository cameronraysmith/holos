// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file holos/v1alpha1/user.proto (package holos.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Timestamps } from "./timestamps_pb.js";

/**
 * User represents a human user in the system.  See db schema in ent/schema/user.go
 *
 * @generated from message holos.v1alpha1.User
 */
export class User extends Message<User> {
  /**
   * Unique id assigned by the server.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: bool email_verified = 3;
   */
  emailVerified = false;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: holos.v1alpha1.Timestamps timestamps = 5;
   */
  timestamps?: Timestamps;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "timestamps", kind: "message", T: Timestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.CreateCallerUserRequest
 */
export class CreateCallerUserRequest extends Message<CreateCallerUserRequest> {
  constructor(data?: PartialMessage<CreateCallerUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.CreateCallerUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCallerUserRequest {
    return new CreateCallerUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCallerUserRequest {
    return new CreateCallerUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCallerUserRequest {
    return new CreateCallerUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCallerUserRequest | PlainMessage<CreateCallerUserRequest> | undefined, b: CreateCallerUserRequest | PlainMessage<CreateCallerUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateCallerUserRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.CreateCallerUserResponse
 */
export class CreateCallerUserResponse extends Message<CreateCallerUserResponse> {
  /**
   * @generated from field: holos.v1alpha1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<CreateCallerUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.CreateCallerUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCallerUserResponse {
    return new CreateCallerUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCallerUserResponse {
    return new CreateCallerUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCallerUserResponse {
    return new CreateCallerUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCallerUserResponse | PlainMessage<CreateCallerUserResponse> | undefined, b: CreateCallerUserResponse | PlainMessage<CreateCallerUserResponse> | undefined): boolean {
    return proto3.util.equals(CreateCallerUserResponse, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.GetCallerClaimsRequest
 */
export class GetCallerClaimsRequest extends Message<GetCallerClaimsRequest> {
  constructor(data?: PartialMessage<GetCallerClaimsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetCallerClaimsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCallerClaimsRequest {
    return new GetCallerClaimsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCallerClaimsRequest {
    return new GetCallerClaimsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCallerClaimsRequest {
    return new GetCallerClaimsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCallerClaimsRequest | PlainMessage<GetCallerClaimsRequest> | undefined, b: GetCallerClaimsRequest | PlainMessage<GetCallerClaimsRequest> | undefined): boolean {
    return proto3.util.equals(GetCallerClaimsRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.Claims
 */
export class Claims extends Message<Claims> {
  /**
   * @generated from field: string iss = 1;
   */
  iss = "";

  /**
   * @generated from field: string sub = 2;
   */
  sub = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: bool email_verified = 4;
   */
  emailVerified = false;

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: repeated string groups = 6;
   */
  groups: string[] = [];

  /**
   * @generated from field: string given_name = 7;
   */
  givenName = "";

  /**
   * @generated from field: string family_name = 8;
   */
  familyName = "";

  /**
   * @generated from field: string picture = 9;
   */
  picture = "";

  constructor(data?: PartialMessage<Claims>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.Claims";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "iss", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "groups", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "given_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "family_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "picture", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claims {
    return new Claims().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claims {
    return new Claims().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claims {
    return new Claims().fromJsonString(jsonString, options);
  }

  static equals(a: Claims | PlainMessage<Claims> | undefined, b: Claims | PlainMessage<Claims> | undefined): boolean {
    return proto3.util.equals(Claims, a, b);
  }
}

/**
 * UserClaims represents id token claims
 *
 * @generated from message holos.v1alpha1.GetCallerClaimsResponse
 */
export class GetCallerClaimsResponse extends Message<GetCallerClaimsResponse> {
  /**
   * @generated from field: holos.v1alpha1.Claims claims = 1;
   */
  claims?: Claims;

  constructor(data?: PartialMessage<GetCallerClaimsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetCallerClaimsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "claims", kind: "message", T: Claims },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCallerClaimsResponse {
    return new GetCallerClaimsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCallerClaimsResponse {
    return new GetCallerClaimsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCallerClaimsResponse {
    return new GetCallerClaimsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCallerClaimsResponse | PlainMessage<GetCallerClaimsResponse> | undefined, b: GetCallerClaimsResponse | PlainMessage<GetCallerClaimsResponse> | undefined): boolean {
    return proto3.util.equals(GetCallerClaimsResponse, a, b);
  }
}

/**
 * Empty request, claims are pulled from the id token
 *
 * @generated from message holos.v1alpha1.GetCallerUserRequest
 */
export class GetCallerUserRequest extends Message<GetCallerUserRequest> {
  constructor(data?: PartialMessage<GetCallerUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetCallerUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCallerUserRequest {
    return new GetCallerUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCallerUserRequest {
    return new GetCallerUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCallerUserRequest {
    return new GetCallerUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCallerUserRequest | PlainMessage<GetCallerUserRequest> | undefined, b: GetCallerUserRequest | PlainMessage<GetCallerUserRequest> | undefined): boolean {
    return proto3.util.equals(GetCallerUserRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.GetCallerUserResponse
 */
export class GetCallerUserResponse extends Message<GetCallerUserResponse> {
  /**
   * @generated from field: holos.v1alpha1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetCallerUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetCallerUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCallerUserResponse {
    return new GetCallerUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCallerUserResponse {
    return new GetCallerUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCallerUserResponse {
    return new GetCallerUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCallerUserResponse | PlainMessage<GetCallerUserResponse> | undefined, b: GetCallerUserResponse | PlainMessage<GetCallerUserResponse> | undefined): boolean {
    return proto3.util.equals(GetCallerUserResponse, a, b);
  }
}

