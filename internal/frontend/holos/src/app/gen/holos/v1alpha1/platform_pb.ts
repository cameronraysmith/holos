// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file holos/v1alpha1/platform.proto (package holos.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Value } from "@bufbuild/protobuf";
import { Timestamps } from "./timestamps_pb.js";
import { Creator } from "./user_pb.js";

/**
 * RawConfig represents the raw form configuration as opaque bytes.  Used for input.
 *
 * @generated from message holos.v1alpha1.RawConfig
 */
export class RawConfig extends Message<RawConfig> {
  /**
   * @generated from field: bytes form = 1;
   */
  form = new Uint8Array(0);

  /**
   * @generated from field: bytes values = 2;
   */
  values = new Uint8Array(0);

  /**
   * @generated from field: bytes cue = 3;
   */
  cue = new Uint8Array(0);

  /**
   * @generated from field: string definition = 4;
   */
  definition = "";

  constructor(data?: PartialMessage<RawConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.RawConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "form", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "values", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "cue", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "definition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RawConfig {
    return new RawConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RawConfig {
    return new RawConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RawConfig {
    return new RawConfig().fromJsonString(jsonString, options);
  }

  static equals(a: RawConfig | PlainMessage<RawConfig> | undefined, b: RawConfig | PlainMessage<RawConfig> | undefined): boolean {
    return proto3.util.equals(RawConfig, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.Config
 */
export class Config extends Message<Config> {
  /**
   * @generated from field: holos.v1alpha1.PlatformForm form = 1;
   */
  form?: PlatformForm;

  /**
   * Values are the user supplied config values organized by section.
   *
   * @generated from field: holos.v1alpha1.UserDefinedConfig values = 2;
   */
  values?: UserDefinedConfig;

  constructor(data?: PartialMessage<Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "form", kind: "message", T: PlatformForm },
    { no: 2, name: "values", kind: "message", T: UserDefinedConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config {
    return new Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJsonString(jsonString, options);
  }

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean {
    return proto3.util.equals(Config, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformConfig
 */
export class PlatformConfig extends Message<PlatformConfig> {
  /**
   * @generated from field: holos.v1alpha1.PlatformStruct platform = 1;
   */
  platform?: PlatformStruct;

  constructor(data?: PartialMessage<PlatformConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform", kind: "message", T: PlatformStruct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformConfig {
    return new PlatformConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformConfig {
    return new PlatformConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformConfig {
    return new PlatformConfig().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformConfig | PlainMessage<PlatformConfig> | undefined, b: PlatformConfig | PlainMessage<PlatformConfig> | undefined): boolean {
    return proto3.util.equals(PlatformConfig, a, b);
  }
}

/**
 * PlatformConfig represents the platform config struct.  The JSON encoding of this message is directly usable in CUE.
 * TODO: consolidate PlatformStruct and Platform into one message type representing a Platform resource.
 *
 * @generated from message holos.v1alpha1.PlatformStruct
 */
export class PlatformStruct extends Message<PlatformStruct> {
  /**
   * @generated from field: holos.v1alpha1.PlatformSpec spec = 1;
   */
  spec?: PlatformSpec;

  constructor(data?: PartialMessage<PlatformStruct>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformStruct";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: PlatformSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformStruct {
    return new PlatformStruct().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformStruct {
    return new PlatformStruct().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformStruct {
    return new PlatformStruct().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformStruct | PlainMessage<PlatformStruct> | undefined, b: PlatformStruct | PlainMessage<PlatformStruct> | undefined): boolean {
    return proto3.util.equals(PlatformStruct, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformSpec
 */
export class PlatformSpec extends Message<PlatformSpec> {
  /**
   * @generated from field: holos.v1alpha1.PlatformSpecConfig config = 1;
   */
  config?: PlatformSpecConfig;

  constructor(data?: PartialMessage<PlatformSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: PlatformSpecConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformSpec {
    return new PlatformSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformSpec {
    return new PlatformSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformSpec {
    return new PlatformSpec().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformSpec | PlainMessage<PlatformSpec> | undefined, b: PlatformSpec | PlainMessage<PlatformSpec> | undefined): boolean {
    return proto3.util.equals(PlatformSpec, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformSpecConfig
 */
export class PlatformSpecConfig extends Message<PlatformSpecConfig> {
  /**
   * @generated from field: holos.v1alpha1.UserDefinedConfig user = 1;
   */
  user?: UserDefinedConfig;

  constructor(data?: PartialMessage<PlatformSpecConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformSpecConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: UserDefinedConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformSpecConfig {
    return new PlatformSpecConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformSpecConfig {
    return new PlatformSpecConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformSpecConfig {
    return new PlatformSpecConfig().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformSpecConfig | PlainMessage<PlatformSpecConfig> | undefined, b: PlatformSpecConfig | PlainMessage<PlatformSpecConfig> | undefined): boolean {
    return proto3.util.equals(PlatformSpecConfig, a, b);
  }
}

/**
 * UserDefinedConfig represents user defined configuration values.
 *
 * @generated from message holos.v1alpha1.UserDefinedConfig
 */
export class UserDefinedConfig extends Message<UserDefinedConfig> {
  /**
   * @generated from field: map<string, holos.v1alpha1.UserDefinedSection> sections = 1;
   */
  sections: { [key: string]: UserDefinedSection } = {};

  constructor(data?: PartialMessage<UserDefinedConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.UserDefinedConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sections", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: UserDefinedSection} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDefinedConfig {
    return new UserDefinedConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDefinedConfig {
    return new UserDefinedConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDefinedConfig {
    return new UserDefinedConfig().fromJsonString(jsonString, options);
  }

  static equals(a: UserDefinedConfig | PlainMessage<UserDefinedConfig> | undefined, b: UserDefinedConfig | PlainMessage<UserDefinedConfig> | undefined): boolean {
    return proto3.util.equals(UserDefinedConfig, a, b);
  }
}

/**
 * UserDefinedSection represents a user defined config section.
 *
 * @generated from message holos.v1alpha1.UserDefinedSection
 */
export class UserDefinedSection extends Message<UserDefinedSection> {
  /**
   * @generated from field: map<string, google.protobuf.Value> fields = 1;
   */
  fields: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<UserDefinedSection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.UserDefinedSection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDefinedSection {
    return new UserDefinedSection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDefinedSection {
    return new UserDefinedSection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDefinedSection {
    return new UserDefinedSection().fromJsonString(jsonString, options);
  }

  static equals(a: UserDefinedSection | PlainMessage<UserDefinedSection> | undefined, b: UserDefinedSection | PlainMessage<UserDefinedSection> | undefined): boolean {
    return proto3.util.equals(UserDefinedSection, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.Platform
 */
export class Platform extends Message<Platform> {
  /**
   * Unique id assigned by the server.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: holos.v1alpha1.Timestamps timestamps = 2;
   */
  timestamps?: Timestamps;

  /**
   * Organization ID resource owner.
   *
   * @generated from field: string org_id = 3;
   */
  orgId = "";

  /**
   * name is the platform short name as a dns label.
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string display_name = 5;
   */
  displayName = "";

  /**
   * @generated from field: holos.v1alpha1.Creator creator = 6;
   */
  creator?: Creator;

  /**
   * config represents the platform config form and values.  Read only.
   *
   * @generated from field: holos.v1alpha1.Config config = 7;
   */
  config?: Config;

  /**
   * raw_config represents the platform config form and values.  Write only.
   *
   * @generated from field: holos.v1alpha1.RawConfig raw_config = 8;
   */
  rawConfig?: RawConfig;

  constructor(data?: PartialMessage<Platform>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.Platform";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: Timestamps },
    { no: 3, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creator", kind: "message", T: Creator },
    { no: 7, name: "config", kind: "message", T: Config },
    { no: 8, name: "raw_config", kind: "message", T: RawConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Platform {
    return new Platform().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Platform {
    return new Platform().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Platform {
    return new Platform().fromJsonString(jsonString, options);
  }

  static equals(a: Platform | PlainMessage<Platform> | undefined, b: Platform | PlainMessage<Platform> | undefined): boolean {
    return proto3.util.equals(Platform, a, b);
  }
}

/**
 * TODO: add a metadata message to make it easier for the client to adapt the
 * FieldConfigs into an es FormlyFieldConfig[].
 * TODO: rename fieldConfigs to fields to align with how it's used everywhere
 * else and with the formly documentation.
 *
 * @generated from message holos.v1alpha1.ConfigFormSection
 */
export class ConfigFormSection extends Message<ConfigFormSection> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string displayName = 2;
   */
  displayName = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * NOTE: On the wire, carry any JSON as field configs for expedience.  I
   * attempted to reflect FormlyFieldConfig in protobuf, but it was too time
   * consuming.  The loosely defined Formly json data API creates significant
   * friction when joined with a well defined protobuf API.  Therefore, we do
   * not specify anything about the Forms API, convey any valid JSON, and leave
   * it up to CUE and Formly on the sending and receiving side of the API.
   *
   * We use CUE to define our own holos form elements as a subset of the loose
   * Formly definitions.  We further hope Formly will move toward a better JSON
   * data API, but it's unlikely.  Consider replacing Formly entirely and
   * building on top of the strongly typed Angular Dyanmic Forms API.
   *
   * Refer to: https://github.com/ngx-formly/ngx-formly/blob/v6.3.0/src/core/src/lib/models/fieldconfig.ts#L15
   * Consider: https://angular.io/guide/dynamic-form
   *
   * @generated from field: repeated google.protobuf.Value fieldConfigs = 4;
   */
  fieldConfigs: Value[] = [];

  constructor(data?: PartialMessage<ConfigFormSection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.ConfigFormSection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "displayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fieldConfigs", kind: "message", T: Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigFormSection {
    return new ConfigFormSection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigFormSection {
    return new ConfigFormSection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigFormSection {
    return new ConfigFormSection().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigFormSection | PlainMessage<ConfigFormSection> | undefined, b: ConfigFormSection | PlainMessage<ConfigFormSection> | undefined): boolean {
    return proto3.util.equals(ConfigFormSection, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformFormSpec
 */
export class PlatformFormSpec extends Message<PlatformFormSpec> {
  /**
   * @generated from field: repeated holos.v1alpha1.ConfigFormSection sections = 1;
   */
  sections: ConfigFormSection[] = [];

  constructor(data?: PartialMessage<PlatformFormSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformFormSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sections", kind: "message", T: ConfigFormSection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformFormSpec {
    return new PlatformFormSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformFormSpec {
    return new PlatformFormSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformFormSpec {
    return new PlatformFormSpec().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformFormSpec | PlainMessage<PlatformFormSpec> | undefined, b: PlatformFormSpec | PlainMessage<PlatformFormSpec> | undefined): boolean {
    return proto3.util.equals(PlatformFormSpec, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.GetPlatformsRequest
 */
export class GetPlatformsRequest extends Message<GetPlatformsRequest> {
  /**
   * @generated from field: string org_id = 1;
   */
  orgId = "";

  constructor(data?: PartialMessage<GetPlatformsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetPlatformsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlatformsRequest {
    return new GetPlatformsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlatformsRequest {
    return new GetPlatformsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlatformsRequest {
    return new GetPlatformsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlatformsRequest | PlainMessage<GetPlatformsRequest> | undefined, b: GetPlatformsRequest | PlainMessage<GetPlatformsRequest> | undefined): boolean {
    return proto3.util.equals(GetPlatformsRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.GetPlatformsResponse
 */
export class GetPlatformsResponse extends Message<GetPlatformsResponse> {
  /**
   * @generated from field: repeated holos.v1alpha1.Platform platforms = 1;
   */
  platforms: Platform[] = [];

  constructor(data?: PartialMessage<GetPlatformsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetPlatformsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platforms", kind: "message", T: Platform, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlatformsResponse {
    return new GetPlatformsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlatformsResponse {
    return new GetPlatformsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlatformsResponse {
    return new GetPlatformsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlatformsResponse | PlainMessage<GetPlatformsResponse> | undefined, b: GetPlatformsResponse | PlainMessage<GetPlatformsResponse> | undefined): boolean {
    return proto3.util.equals(GetPlatformsResponse, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.GetPlatformResponse
 */
export class GetPlatformResponse extends Message<GetPlatformResponse> {
  /**
   * @generated from field: holos.v1alpha1.Platform platform = 1;
   */
  platform?: Platform;

  constructor(data?: PartialMessage<GetPlatformResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetPlatformResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform", kind: "message", T: Platform },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlatformResponse {
    return new GetPlatformResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlatformResponse {
    return new GetPlatformResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlatformResponse {
    return new GetPlatformResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlatformResponse | PlainMessage<GetPlatformResponse> | undefined, b: GetPlatformResponse | PlainMessage<GetPlatformResponse> | undefined): boolean {
    return proto3.util.equals(GetPlatformResponse, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.AddPlatformRequest
 */
export class AddPlatformRequest extends Message<AddPlatformRequest> {
  /**
   * @generated from field: holos.v1alpha1.Platform platform = 1;
   */
  platform?: Platform;

  constructor(data?: PartialMessage<AddPlatformRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.AddPlatformRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform", kind: "message", T: Platform },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddPlatformRequest {
    return new AddPlatformRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddPlatformRequest {
    return new AddPlatformRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddPlatformRequest {
    return new AddPlatformRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddPlatformRequest | PlainMessage<AddPlatformRequest> | undefined, b: AddPlatformRequest | PlainMessage<AddPlatformRequest> | undefined): boolean {
    return proto3.util.equals(AddPlatformRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.GetPlatformRequest
 */
export class GetPlatformRequest extends Message<GetPlatformRequest> {
  /**
   * @generated from field: string platform_id = 1;
   */
  platformId = "";

  constructor(data?: PartialMessage<GetPlatformRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetPlatformRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlatformRequest {
    return new GetPlatformRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlatformRequest {
    return new GetPlatformRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlatformRequest {
    return new GetPlatformRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlatformRequest | PlainMessage<GetPlatformRequest> | undefined, b: GetPlatformRequest | PlainMessage<GetPlatformRequest> | undefined): boolean {
    return proto3.util.equals(GetPlatformRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.MetadataName
 */
export class MetadataName extends Message<MetadataName> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MetadataName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.MetadataName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataName {
    return new MetadataName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataName {
    return new MetadataName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataName {
    return new MetadataName().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataName | PlainMessage<MetadataName> | undefined, b: MetadataName | PlainMessage<MetadataName> | undefined): boolean {
    return proto3.util.equals(MetadataName, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformForm
 */
export class PlatformForm extends Message<PlatformForm> {
  /**
   * @generated from field: string apiVersion = 1;
   */
  apiVersion = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * @generated from field: holos.v1alpha1.MetadataName metadata = 3;
   */
  metadata?: MetadataName;

  /**
   * @generated from field: holos.v1alpha1.PlatformFormSpec spec = 4;
   */
  spec?: PlatformFormSpec;

  constructor(data?: PartialMessage<PlatformForm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformForm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "message", T: MetadataName },
    { no: 4, name: "spec", kind: "message", T: PlatformFormSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformForm {
    return new PlatformForm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformForm {
    return new PlatformForm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformForm {
    return new PlatformForm().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformForm | PlainMessage<PlatformForm> | undefined, b: PlatformForm | PlainMessage<PlatformForm> | undefined): boolean {
    return proto3.util.equals(PlatformForm, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PutPlatformConfigRequest
 */
export class PutPlatformConfigRequest extends Message<PutPlatformConfigRequest> {
  /**
   * @generated from field: string platform_id = 1;
   */
  platformId = "";

  /**
   * @generated from field: holos.v1alpha1.UserDefinedConfig values = 2;
   */
  values?: UserDefinedConfig;

  constructor(data?: PartialMessage<PutPlatformConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PutPlatformConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "values", kind: "message", T: UserDefinedConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutPlatformConfigRequest {
    return new PutPlatformConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutPlatformConfigRequest {
    return new PutPlatformConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutPlatformConfigRequest {
    return new PutPlatformConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutPlatformConfigRequest | PlainMessage<PutPlatformConfigRequest> | undefined, b: PutPlatformConfigRequest | PlainMessage<PutPlatformConfigRequest> | undefined): boolean {
    return proto3.util.equals(PutPlatformConfigRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.GetPlatformConfigRequest
 */
export class GetPlatformConfigRequest extends Message<GetPlatformConfigRequest> {
  /**
   * @generated from field: string platform_id = 1;
   */
  platformId = "";

  constructor(data?: PartialMessage<GetPlatformConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetPlatformConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlatformConfigRequest {
    return new GetPlatformConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlatformConfigRequest {
    return new GetPlatformConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlatformConfigRequest {
    return new GetPlatformConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlatformConfigRequest | PlainMessage<GetPlatformConfigRequest> | undefined, b: GetPlatformConfigRequest | PlainMessage<GetPlatformConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetPlatformConfigRequest, a, b);
  }
}

