// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file holos/v1alpha1/platform.proto (package holos.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message holos.v1alpha1.Platform
 */
export class Platform extends Message<Platform> {
  /**
   * Unique id assigned by the server.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Organization ID resource owner.
   *
   * @generated from field: string org_id = 2;
   */
  orgId = "";

  /**
   * name is the platform short name as a dns label.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * @generated from field: holos.v1alpha1.PlatformSpec spec = 5;
   */
  spec?: PlatformSpec;

  constructor(data?: PartialMessage<Platform>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.Platform";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "spec", kind: "message", T: PlatformSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Platform {
    return new Platform().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Platform {
    return new Platform().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Platform {
    return new Platform().fromJsonString(jsonString, options);
  }

  static equals(a: Platform | PlainMessage<Platform> | undefined, b: Platform | PlainMessage<Platform> | undefined): boolean {
    return proto3.util.equals(Platform, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformSpec
 */
export class PlatformSpec extends Message<PlatformSpec> {
  /**
   * model represents the user-defined and user-supplied form field values.
   *
   * @generated from field: google.protobuf.Struct model = 1;
   */
  model?: Struct;

  constructor(data?: PartialMessage<PlatformSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformSpec {
    return new PlatformSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformSpec {
    return new PlatformSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformSpec {
    return new PlatformSpec().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformSpec | PlainMessage<PlatformSpec> | undefined, b: PlatformSpec | PlainMessage<PlatformSpec> | undefined): boolean {
    return proto3.util.equals(PlatformSpec, a, b);
  }
}

/**
 * Form represents the Formly input form.
 *
 * @generated from message holos.v1alpha1.Form
 */
export class Form extends Message<Form> {
  /**
   * fields represents FormlyFieldConfig[] encoded as a JSON array.
   *
   * @generated from field: repeated google.protobuf.Struct fields = 1;
   */
  fields: Struct[] = [];

  constructor(data?: PartialMessage<Form>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.Form";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Form {
    return new Form().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Form {
    return new Form().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Form {
    return new Form().fromJsonString(jsonString, options);
  }

  static equals(a: Form | PlainMessage<Form> | undefined, b: Form | PlainMessage<Form> | undefined): boolean {
    return proto3.util.equals(Form, a, b);
  }
}

/**
 * Model represents the values entered into the form, stored in the form's model
 * in the web app, and persisted into the backend database.  The model is
 * ultimately intended as the input to platform rendering.
 *
 * @generated from message holos.v1alpha1.Model
 */
export class Model extends Message<Model> {
  /**
   * @generated from field: google.protobuf.Struct model = 1;
   */
  model?: Struct;

  constructor(data?: PartialMessage<Model>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.Model";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Model {
    return new Model().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Model {
    return new Model().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Model {
    return new Model().fromJsonString(jsonString, options);
  }

  static equals(a: Model | PlainMessage<Model> | undefined, b: Model | PlainMessage<Model> | undefined): boolean {
    return proto3.util.equals(Model, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.ListPlatformsRequest
 */
export class ListPlatformsRequest extends Message<ListPlatformsRequest> {
  /**
   * @generated from field: string org_id = 1;
   */
  orgId = "";

  constructor(data?: PartialMessage<ListPlatformsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.ListPlatformsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPlatformsRequest {
    return new ListPlatformsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPlatformsRequest {
    return new ListPlatformsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPlatformsRequest {
    return new ListPlatformsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPlatformsRequest | PlainMessage<ListPlatformsRequest> | undefined, b: ListPlatformsRequest | PlainMessage<ListPlatformsRequest> | undefined): boolean {
    return proto3.util.equals(ListPlatformsRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.ListPlatformsResponse
 */
export class ListPlatformsResponse extends Message<ListPlatformsResponse> {
  /**
   * @generated from field: repeated holos.v1alpha1.Platform platforms = 1;
   */
  platforms: Platform[] = [];

  constructor(data?: PartialMessage<ListPlatformsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.ListPlatformsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platforms", kind: "message", T: Platform, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPlatformsResponse {
    return new ListPlatformsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPlatformsResponse {
    return new ListPlatformsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPlatformsResponse {
    return new ListPlatformsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPlatformsResponse | PlainMessage<ListPlatformsResponse> | undefined, b: ListPlatformsResponse | PlainMessage<ListPlatformsResponse> | undefined): boolean {
    return proto3.util.equals(ListPlatformsResponse, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.AddPlatformRequest
 */
export class AddPlatformRequest extends Message<AddPlatformRequest> {
  /**
   * @generated from field: holos.v1alpha1.Platform platform = 1;
   */
  platform?: Platform;

  constructor(data?: PartialMessage<AddPlatformRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.AddPlatformRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform", kind: "message", T: Platform },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddPlatformRequest {
    return new AddPlatformRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddPlatformRequest {
    return new AddPlatformRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddPlatformRequest {
    return new AddPlatformRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddPlatformRequest | PlainMessage<AddPlatformRequest> | undefined, b: AddPlatformRequest | PlainMessage<AddPlatformRequest> | undefined): boolean {
    return proto3.util.equals(AddPlatformRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.AddPlatformResponse
 */
export class AddPlatformResponse extends Message<AddPlatformResponse> {
  /**
   * @generated from field: repeated holos.v1alpha1.Platform platforms = 1;
   */
  platforms: Platform[] = [];

  constructor(data?: PartialMessage<AddPlatformResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.AddPlatformResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platforms", kind: "message", T: Platform, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddPlatformResponse {
    return new AddPlatformResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddPlatformResponse {
    return new AddPlatformResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddPlatformResponse {
    return new AddPlatformResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddPlatformResponse | PlainMessage<AddPlatformResponse> | undefined, b: AddPlatformResponse | PlainMessage<AddPlatformResponse> | undefined): boolean {
    return proto3.util.equals(AddPlatformResponse, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.GetPlatformRequest
 */
export class GetPlatformRequest extends Message<GetPlatformRequest> {
  /**
   * @generated from field: string platform_id = 1;
   */
  platformId = "";

  constructor(data?: PartialMessage<GetPlatformRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetPlatformRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlatformRequest {
    return new GetPlatformRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlatformRequest {
    return new GetPlatformRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlatformRequest {
    return new GetPlatformRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlatformRequest | PlainMessage<GetPlatformRequest> | undefined, b: GetPlatformRequest | PlainMessage<GetPlatformRequest> | undefined): boolean {
    return proto3.util.equals(GetPlatformRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.GetPlatformResponse
 */
export class GetPlatformResponse extends Message<GetPlatformResponse> {
  /**
   * @generated from field: holos.v1alpha1.Platform platform = 1;
   */
  platform?: Platform;

  constructor(data?: PartialMessage<GetPlatformResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.GetPlatformResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform", kind: "message", T: Platform },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlatformResponse {
    return new GetPlatformResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlatformResponse {
    return new GetPlatformResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlatformResponse {
    return new GetPlatformResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlatformResponse | PlainMessage<GetPlatformResponse> | undefined, b: GetPlatformResponse | PlainMessage<GetPlatformResponse> | undefined): boolean {
    return proto3.util.equals(GetPlatformResponse, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformServiceGetFormRequest
 */
export class PlatformServiceGetFormRequest extends Message<PlatformServiceGetFormRequest> {
  /**
   * @generated from field: string platform_id = 1;
   */
  platformId = "";

  constructor(data?: PartialMessage<PlatformServiceGetFormRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformServiceGetFormRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformServiceGetFormRequest {
    return new PlatformServiceGetFormRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformServiceGetFormRequest {
    return new PlatformServiceGetFormRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformServiceGetFormRequest {
    return new PlatformServiceGetFormRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformServiceGetFormRequest | PlainMessage<PlatformServiceGetFormRequest> | undefined, b: PlatformServiceGetFormRequest | PlainMessage<PlatformServiceGetFormRequest> | undefined): boolean {
    return proto3.util.equals(PlatformServiceGetFormRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformServiceGetFormResponse
 */
export class PlatformServiceGetFormResponse extends Message<PlatformServiceGetFormResponse> {
  /**
   * @generated from field: repeated google.protobuf.Struct fields = 1;
   */
  fields: Struct[] = [];

  /**
   * @generated from field: google.protobuf.Struct model = 2;
   */
  model?: Struct;

  constructor(data?: PartialMessage<PlatformServiceGetFormResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformServiceGetFormResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "message", T: Struct, repeated: true },
    { no: 2, name: "model", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformServiceGetFormResponse {
    return new PlatformServiceGetFormResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformServiceGetFormResponse {
    return new PlatformServiceGetFormResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformServiceGetFormResponse {
    return new PlatformServiceGetFormResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformServiceGetFormResponse | PlainMessage<PlatformServiceGetFormResponse> | undefined, b: PlatformServiceGetFormResponse | PlainMessage<PlatformServiceGetFormResponse> | undefined): boolean {
    return proto3.util.equals(PlatformServiceGetFormResponse, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformServiceGetModelRequest
 */
export class PlatformServiceGetModelRequest extends Message<PlatformServiceGetModelRequest> {
  /**
   * @generated from field: string platform_id = 1;
   */
  platformId = "";

  constructor(data?: PartialMessage<PlatformServiceGetModelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformServiceGetModelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformServiceGetModelRequest {
    return new PlatformServiceGetModelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformServiceGetModelRequest {
    return new PlatformServiceGetModelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformServiceGetModelRequest {
    return new PlatformServiceGetModelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformServiceGetModelRequest | PlainMessage<PlatformServiceGetModelRequest> | undefined, b: PlatformServiceGetModelRequest | PlainMessage<PlatformServiceGetModelRequest> | undefined): boolean {
    return proto3.util.equals(PlatformServiceGetModelRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformServiceGetModelResponse
 */
export class PlatformServiceGetModelResponse extends Message<PlatformServiceGetModelResponse> {
  /**
   * @generated from field: google.protobuf.Struct model = 1;
   */
  model?: Struct;

  constructor(data?: PartialMessage<PlatformServiceGetModelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformServiceGetModelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformServiceGetModelResponse {
    return new PlatformServiceGetModelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformServiceGetModelResponse {
    return new PlatformServiceGetModelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformServiceGetModelResponse {
    return new PlatformServiceGetModelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformServiceGetModelResponse | PlainMessage<PlatformServiceGetModelResponse> | undefined, b: PlatformServiceGetModelResponse | PlainMessage<PlatformServiceGetModelResponse> | undefined): boolean {
    return proto3.util.equals(PlatformServiceGetModelResponse, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformServicePutModelRequest
 */
export class PlatformServicePutModelRequest extends Message<PlatformServicePutModelRequest> {
  /**
   * @generated from field: string platform_id = 1;
   */
  platformId = "";

  /**
   * @generated from field: google.protobuf.Struct model = 2;
   */
  model?: Struct;

  constructor(data?: PartialMessage<PlatformServicePutModelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformServicePutModelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformServicePutModelRequest {
    return new PlatformServicePutModelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformServicePutModelRequest {
    return new PlatformServicePutModelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformServicePutModelRequest {
    return new PlatformServicePutModelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformServicePutModelRequest | PlainMessage<PlatformServicePutModelRequest> | undefined, b: PlatformServicePutModelRequest | PlainMessage<PlatformServicePutModelRequest> | undefined): boolean {
    return proto3.util.equals(PlatformServicePutModelRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformServicePutModelResponse
 */
export class PlatformServicePutModelResponse extends Message<PlatformServicePutModelResponse> {
  /**
   * @generated from field: google.protobuf.Struct model = 1;
   */
  model?: Struct;

  constructor(data?: PartialMessage<PlatformServicePutModelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformServicePutModelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformServicePutModelResponse {
    return new PlatformServicePutModelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformServicePutModelResponse {
    return new PlatformServicePutModelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformServicePutModelResponse {
    return new PlatformServicePutModelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformServicePutModelResponse | PlainMessage<PlatformServicePutModelResponse> | undefined, b: PlatformServicePutModelResponse | PlainMessage<PlatformServicePutModelResponse> | undefined): boolean {
    return proto3.util.equals(PlatformServicePutModelResponse, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformServicePutFormRequest
 */
export class PlatformServicePutFormRequest extends Message<PlatformServicePutFormRequest> {
  /**
   * @generated from field: string platform_id = 1;
   */
  platformId = "";

  /**
   * @generated from field: repeated google.protobuf.Struct fields = 2;
   */
  fields: Struct[] = [];

  constructor(data?: PartialMessage<PlatformServicePutFormRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformServicePutFormRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fields", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformServicePutFormRequest {
    return new PlatformServicePutFormRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformServicePutFormRequest {
    return new PlatformServicePutFormRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformServicePutFormRequest {
    return new PlatformServicePutFormRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformServicePutFormRequest | PlainMessage<PlatformServicePutFormRequest> | undefined, b: PlatformServicePutFormRequest | PlainMessage<PlatformServicePutFormRequest> | undefined): boolean {
    return proto3.util.equals(PlatformServicePutFormRequest, a, b);
  }
}

/**
 * @generated from message holos.v1alpha1.PlatformServicePutFormResponse
 */
export class PlatformServicePutFormResponse extends Message<PlatformServicePutFormResponse> {
  /**
   * @generated from field: repeated google.protobuf.Struct fields = 1;
   */
  fields: Struct[] = [];

  constructor(data?: PartialMessage<PlatformServicePutFormResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.v1alpha1.PlatformServicePutFormResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlatformServicePutFormResponse {
    return new PlatformServicePutFormResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlatformServicePutFormResponse {
    return new PlatformServicePutFormResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlatformServicePutFormResponse {
    return new PlatformServicePutFormResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PlatformServicePutFormResponse | PlainMessage<PlatformServicePutFormResponse> | undefined, b: PlatformServicePutFormResponse | PlainMessage<PlatformServicePutFormResponse> | undefined): boolean {
    return proto3.util.equals(PlatformServicePutFormResponse, a, b);
  }
}

