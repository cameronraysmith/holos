// Code generated by ent, DO NOT EDIT.

package useridentity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gofrs/uuid"
	"github.com/holos-run/holos/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldUpdatedAt, v))
}

// Iss applies equality check predicate on the "iss" field. It's identical to IssEQ.
func Iss(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldIss, v))
}

// Sub applies equality check predicate on the "sub" field. It's identical to SubEQ.
func Sub(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldSub, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldEmail, v))
}

// EmailVerified applies equality check predicate on the "email_verified" field. It's identical to EmailVerifiedEQ.
func EmailVerified(v bool) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldEmailVerified, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldUpdatedAt, v))
}

// IssEQ applies the EQ predicate on the "iss" field.
func IssEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldIss, v))
}

// IssNEQ applies the NEQ predicate on the "iss" field.
func IssNEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldIss, v))
}

// IssIn applies the In predicate on the "iss" field.
func IssIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldIss, vs...))
}

// IssNotIn applies the NotIn predicate on the "iss" field.
func IssNotIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldIss, vs...))
}

// IssGT applies the GT predicate on the "iss" field.
func IssGT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldIss, v))
}

// IssGTE applies the GTE predicate on the "iss" field.
func IssGTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldIss, v))
}

// IssLT applies the LT predicate on the "iss" field.
func IssLT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldIss, v))
}

// IssLTE applies the LTE predicate on the "iss" field.
func IssLTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldIss, v))
}

// IssContains applies the Contains predicate on the "iss" field.
func IssContains(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContains(FieldIss, v))
}

// IssHasPrefix applies the HasPrefix predicate on the "iss" field.
func IssHasPrefix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasPrefix(FieldIss, v))
}

// IssHasSuffix applies the HasSuffix predicate on the "iss" field.
func IssHasSuffix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasSuffix(FieldIss, v))
}

// IssEqualFold applies the EqualFold predicate on the "iss" field.
func IssEqualFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEqualFold(FieldIss, v))
}

// IssContainsFold applies the ContainsFold predicate on the "iss" field.
func IssContainsFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContainsFold(FieldIss, v))
}

// SubEQ applies the EQ predicate on the "sub" field.
func SubEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldSub, v))
}

// SubNEQ applies the NEQ predicate on the "sub" field.
func SubNEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldSub, v))
}

// SubIn applies the In predicate on the "sub" field.
func SubIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldSub, vs...))
}

// SubNotIn applies the NotIn predicate on the "sub" field.
func SubNotIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldSub, vs...))
}

// SubGT applies the GT predicate on the "sub" field.
func SubGT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldSub, v))
}

// SubGTE applies the GTE predicate on the "sub" field.
func SubGTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldSub, v))
}

// SubLT applies the LT predicate on the "sub" field.
func SubLT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldSub, v))
}

// SubLTE applies the LTE predicate on the "sub" field.
func SubLTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldSub, v))
}

// SubContains applies the Contains predicate on the "sub" field.
func SubContains(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContains(FieldSub, v))
}

// SubHasPrefix applies the HasPrefix predicate on the "sub" field.
func SubHasPrefix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasPrefix(FieldSub, v))
}

// SubHasSuffix applies the HasSuffix predicate on the "sub" field.
func SubHasSuffix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasSuffix(FieldSub, v))
}

// SubEqualFold applies the EqualFold predicate on the "sub" field.
func SubEqualFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEqualFold(FieldSub, v))
}

// SubContainsFold applies the ContainsFold predicate on the "sub" field.
func SubContainsFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContainsFold(FieldSub, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContainsFold(FieldEmail, v))
}

// EmailVerifiedEQ applies the EQ predicate on the "email_verified" field.
func EmailVerifiedEQ(v bool) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldEmailVerified, v))
}

// EmailVerifiedNEQ applies the NEQ predicate on the "email_verified" field.
func EmailVerifiedNEQ(v bool) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldEmailVerified, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.UserIdentity {
	return predicate.UserIdentity(sql.FieldContainsFold(FieldName, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserIdentity {
	return predicate.UserIdentity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserIdentity {
	return predicate.UserIdentity(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserIdentity) predicate.UserIdentity {
	return predicate.UserIdentity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserIdentity) predicate.UserIdentity {
	return predicate.UserIdentity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserIdentity) predicate.UserIdentity {
	return predicate.UserIdentity(sql.NotPredicates(p))
}
