// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/holos-run/holos/api/core/v1alpha4

// Package v1alpha4 contains the core API contract between the holos cli and CUE
// configuration code.  Platform designers, operators, and software developers
// use this API to write configuration in CUE which `holos` loads.  The overall
// shape of the API defines imperative actions `holos` should carry out to
// render the complete yaml that represents a Platform.
//
// [Platform] defines the complete configuration of a platform.  With the holos
// reference platform this takes the shape of one management cluster and at
// least two workload clusters.  Each cluster has multiple [Component] resources
// applied to it.
//
// Each holos component path, e.g. `components/namespaces` produces exactly one
// [BuildPlan] which produces an [Artifact].  An [Artifact] is a collection of
// fully rendered manifest files written to the filesystem.
package v1alpha4

// BuildPlan represents a build plan for holos to execute.  Each [Platform]
// component produces exactly one BuildPlan.
#BuildPlan: {
	// Kind represents the type of the resource.
	kind: string & "BuildPlan" @go(Kind)

	// APIVersion represents the versioned schema of the resource.
	apiVersion: string & (string | *"v1alpha4") @go(APIVersion)

	// Metadata represents data about the resource such as the Name.
	metadata: #Metadata @go(Metadata)

	// Spec specifies the desired state of the resource.
	spec: #BuildPlanSpec @go(Spec)
}

// BuildPlanSpec represents the specification of the [BuildPlan].
#BuildPlanSpec: {
	// Component represents the component that produced the build plan.
	// Represented as a path relative to the platform root.
	component: string @go(Component)

	// Disabled causes the holos cli to disregard the build plan.
	disabled?: bool @go(Disabled)

	// Steps represent build steps for holos to execute
	steps: [...#BuildStep] @go(Steps,[]BuildStep)
}

// BuildStep represents the holos rendering pipeline for a [BuildPlan].
//
// Each [Generator] may be executed concurrently with other generators in the
// same collection. Each [Transformer] is executed sequentially, the first after
// all generators have completed.
//
// Each BuildStep produces one manifest file artifact.  [Generator] manifests are
// implicitly joined into one artifact file if there is no [Transformer] that
// would otherwise combine them.
#BuildStep: {
	artifact?: #FilePath @go(Artifact)
	generators?: [...#Generator] @go(Generators,[]Generator)
	transformers?: [...#Transformer] @go(Transformers,[]Transformer)
	skip?: bool @go(Skip)
}

// Generator generates an intermediate manifest for a [BuildStep].
//
// Each Generator in a [BuildStep] must have a distinct manifest value for a
// [Transformer] to reference.
#Generator: {
	// Kind represents the kind of generator.  Must be Resources, Helm, or File.
	kind: string & ("Resources" | "Helm" | "File") @go(Kind)

	// Manifest represents the output file for subsequent transformers.
	manifest: string @go(Manifest)

	// Resources generator. Ignored unless kind is Resources.
	resources?: #Resources @go(Resources)

	// Helm generator. Ignored unless kind is Helm.
	helm?: #Helm @go(Helm)

	// File generator. Ignored unless kind is File.
	file?: #File @go(File)
}

// Resource represents one kubernetes api object.
#Resource: {...}

// Resources represents a kubernetes resources [Generator] from CUE.
#Resources: {[string]: [string]: #Resource}

// File represents a simple single file copy [Generator].  Useful with a
// [Kustomize] [Transformer] to process plain manifest files stored in the
// component directory.  Multiple File generators may be used to transform
// multiple resources.
#File: {
	// Source represents a file to read relative to the component path, the
	// [BuildPlanSpec] Component field.
	source: #FilePath @go(Source)
}

// Helm represents a [Chart] manifest [Generator].
#Helm: {
	// Chart represents a helm chart to manage.
	chart: #Chart @go(Chart)

	// Values represents values for holos to marshal into values.yaml when
	// rendering the chart.
	values: #Values @go(Values)

	// EnableHooks enables helm hooks when executing the `helm template` command.
	enableHooks?: bool @go(EnableHooks)
}

// Values represents [Helm] Chart values generated from CUE.
#Values: {...}

// Chart represents a [Helm] Chart.
#Chart: {
	// Name represents the chart name.
	name: string @go(Name)

	// Version represents the chart version.
	version: string @go(Version)

	// Release represents the chart release when executing helm template.
	release: string @go(Release)

	// Repository represents the repository to fetch the chart from.
	repository?: #Repository @go(Repository)
}

// Repository represents a [Helm] [Chart] repository.
#Repository: {
	name: string @go(Name)
	url:  string @go(URL)
}

// Transformer transforms [Generator] manifests within a [BuildStep].
#Transformer: {
	// Kind represents the kind of transformer.  Must be Kustomize.
	kind: string & "Kustomize" @go(Kind)

	// Manifest represents the output file for subsequent transformers.
	manifest?: string @go(Manifest)

	// Kustomize transformer. Ignored unless kind is Kustomize.
	kustomize?: #Kustomize @go(Kustomize)
}

// Kustomize represents a kustomization [Transformer].
#Kustomize: {
	// Kustomization represents the decoded kustomization.yaml file
	kustomization: #Kustomization @go(Kustomization)

	// Files holds file contents for kustomize, e.g. patch files.
	files?: #FileContentMap @go(Files)
}

// Kustomization represents a kustomization.yaml file for use with the
// [Kustomize] [Transformer].  Untyped to avoid tightly coupling holos to
// kubectl versions which was a problem for the Flux maintainers.  Type checking
// is expected to happen in CUE against the kubectl version the user prefers.
#Kustomization: {...}

// FileContent represents file contents.
#FileContent: string

// FileContentMap represents a mapping of file paths to file contents.
#FileContentMap: {[string]: #FileContent}

// FilePath represents a file path.
#FilePath: string

// InternalLabel is an arbitrary unique identifier internal to holos itself.
// The holos cli is expected to never write a InternalLabel value to rendered
// output files, therefore use a InternalLabel when the identifier must be
// unique and internal.  Defined as a type for clarity and type checking.
#InternalLabel: string

// Kind is a discriminator. Defined as a type for clarity and type checking.
#Kind: string

// NameLabel is a unique identifier useful to convert a CUE struct to a list
// when the values have a Name field with a default value.  NameLabel indicates
// the common use case of converting a struct to a list where the Name field of
// the value aligns with the outer struct field name.
//
// For example:
//
//	Outer: [NAME=_]: Name: NAME
#NameLabel: string

// Platform represents a platform to manage.  A Platform resource informs holos
// which components to build.  The platform resource also acts as a container
// for the platform model form values provided by the PlatformService.  The
// primary use case is to collect the cluster names, cluster types, platform
// model, and holos components to build into one resource.
#Platform: {
	// Kind is a string value representing the resource.
	kind: string & "Platform" @go(Kind)

	// APIVersion represents the versioned schema of this resource.
	apiVersion: string & (string | *"v1alpha4") @go(APIVersion)

	// Metadata represents data about the resource such as the Name.
	metadata: #Metadata @go(Metadata)

	// Spec represents the specification.
	spec: #PlatformSpec @go(Spec)
}

// Metadata represents data about the resource such as the Name.
#Metadata: {
	// Name represents the resource name.
	name: string @go(Name)
}

// PlatformSpec represents the specification of a Platform.  Think of a platform
// specification as a list of platform components to apply to a list of
// kubernetes clusters combined with the user-specified Platform Model.
#PlatformSpec: {
	// Components represents a list of holos components to manage.
	components: [...#BuildContext] @go(Components,[]BuildContext)
}

// BuildContext represents the context necessary to render a component into a
// BuildPlan.  Useful to capture parameters passed down from a Platform spec for
// the purpose of idempotent rebuilds.
#BuildContext: {
	// Path is the path of the component relative to the platform root.
	path: string @go(Path)

	// Cluster is the cluster name to provide when rendering the component.
	cluster: string @go(Cluster)

	// Environment for example, dev, test, stage, prod
	environment?: string @go(Environment)

	// Model represents the platform model holos gets from from the
	// PlatformService.GetPlatform rpc method and provides to CUE using a tag.
	model: {...} @go(Model,map[string]any)

	// Tags represents cue tags to provide when rendering the component.
	tags?: [...string] @go(Tags,[]string)
}
