// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/holos-run/holos/api/core/v1alpha2

package v1alpha2

// Label is an arbitrary unique identifier.  Defined as a type for clarity and type checking.
#Label: string

// Kind is a kubernetes api object kind. Defined as a type for clarity and type checking.
#Kind: string

// APIObjectMap is the shape of marshalled api objects returned from cue to the
// holos cli. A map is used to improve the clarity of error messages from cue
// relative to a list.
#APIObjectMap: {[string]: [string]: string}

// FileContentMap represents a mapping of file names to file content.
#FileContentMap: {[string]: string}

// BuildPlan represents a build plan for the holos cli to execute.  A build plan
// is a set of zero or more holos components.
#BuildPlan: {
	// Kind is a string value representing the resource this object represents.
	kind: string & "BuildPlan" @go(Kind)

	// APIVersion represents the versioned schema of this representation of an object.
	apiVersion: string & (string | *"v1alpha2") @go(APIVersion)

	// Spec represents the specification.
	spec: #BuildPlanSpec @go(Spec)
}

#BuildPlanSpec: {
	disabled?:   bool                 @go(Disabled)
	components?: #BuildPlanComponents @go(Components)
}

#BuildPlanComponents: {
	resources?: {[string]: #KubernetesObjects} @go(Resources,map[string]KubernetesObjects)
	kubernetesObjectsList?: [...#KubernetesObjects] @go(KubernetesObjectsList,[]KubernetesObjects)
	helmChartList?: [...#HelmChart] @go(HelmChartList,[]HelmChart)
	kustomizeBuildList?: [...#KustomizeBuild] @go(KustomizeBuildList,[]KustomizeBuild)
}

// HolosComponent defines the fields common to all holos component kinds.  Every
// holos component kind should embed HolosComponent.
#HolosComponent: {
	// Kind is a string value representing the resource this object represents.
	kind: string @go(Kind)

	// APIVersion represents the versioned schema of this representation of an object.
	apiVersion: string & (string | *"v1alpha2") @go(APIVersion)

	// Metadata represents data about the holos component such as the Name.
	metadata: #Metadata @go(Metadata)

	// APIObjectMap holds the marshalled representation of api objects. Think of
	// these objects as being mixed into the upstream resources, for example
	// adding an ExternalSecret to a rendered Helm chart.
	apiObjectMap?: #APIObjectMap @go(APIObjectMap)

	// DeployFiles represents file paths relative to the cluster deploy directory
	// with the value representing the file content.  Intended for defining the
	// ArgoCD Application resource or Flux Kustomization resource from within CUE,
	// but may be used to render any file related to the build plan from CUE.
	deployFiles?: #FileContentMap @go(DeployFiles)

	// Kustomize represents a kubectl kustomize build post-processing step.
	kustomize?: #Kustomize @go(Kustomize)

	// Skip causes holos to take no action regarding this component.
	skip: bool & (bool | *false) @go(Skip)
}

// Metadata represents data about the holos component such as the Name.
#Metadata: {
	// Name represents the name of the holos component.
	name: string @go(Name)

	// Namespace is the primary namespace of the holos component.  A holos
	// component may manage resources in multiple namespaces, in this case
	// consider setting the component namespace to default.
	namespace: string @go(Namespace)
}

// Kustomize represents resources necessary to execute a kustomize build.
// Intended for at least two use cases:
//
//  1. Process raw yaml file resources in a holos component directory.
//  2. Post process a HelmChart to inject istio, add custom labels, etc...
#Kustomize: {
	// KustomizeFiles holds file contents for kustomize, e.g. patch files.
	kustomizeFiles?: #FileContentMap @go(KustomizeFiles)

	// ResourcesFile is the file name used for api objects in kustomization.yaml
	resourcesFile?: string @go(ResourcesFile)
}
