// Package push pushes resources to the holos api server.
package push

import (
	"bytes"
	"context"
	"encoding/json"
	"os"
	"path/filepath"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/holos-run/holos/api/v1alpha1"
	"github.com/holos-run/holos/internal/errors"
	object "github.com/holos-run/holos/service/gen/holos/object/v1alpha1"
	platform "github.com/holos-run/holos/service/gen/holos/platform/v1alpha1"
)

// LoadPlatform loads the platform.metadata.json file from a named path.
func LoadPlatform(ctx context.Context, name string) (*platform.Platform, error) {
	data, err := os.ReadFile(filepath.Join(name, "platform.metadata.json"))
	if err != nil {
		return nil, err
	}
	p := &platform.Platform{}
	if err := jsonpb.Unmarshal(bytes.NewReader(data), p); err != nil {
		return nil, err
	}
	return p, nil
}

// PlatformForm builds a json powered web form from CUE code.  The CUE code is
// expected to be derived from the code generated by the `holos generate
// platform` command.
func PlatformForm(ctx context.Context, name string) (*object.Form, error) {
	// build the form which always lives at ./forms/platform relative to the
	// platform root where platform.metadata.json is.
	instance, err := NewInstance(filepath.Join(name, "forms", "platform"))
	if err != nil {
		return nil, errors.Wrap(err)
	}

	formData, err := instance.Export(ctx)
	if err != nil {
		return nil, errors.Wrap(err)
	}

	form := &v1alpha1.Form{}
	decoder := json.NewDecoder(bytes.NewReader(formData))
	decoder.DisallowUnknownFields()
	if err := decoder.Decode(form); err != nil {
		return nil, errors.Wrap(err)
	}

	return &form.Spec.Form, nil
}
