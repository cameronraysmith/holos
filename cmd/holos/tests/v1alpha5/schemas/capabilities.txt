# https://github.com/holos-run/holos/issues/330
# take care to install helm 3.17.3 otherwise kube versions may not align
exec holos init platform v1alpha5 --force
# Make sure the helm chart works with plain helm
exec helm template ./components/capabilities/vendor/0.1.0/capabilities
stdout 'name: has-foo-v1beta1'
stdout 'kubeVersion: v'
exec holos render platform ./platform
# When no capabilities are specified
exec holos compare yaml deploy/components/capabilities/capabilities.gen.yaml want/when-no-capabilities-specified.yaml
# With APIVersions specified
exec holos compare yaml deploy/components/specified/specified.gen.yaml want/with-capabilities-specified.yaml
# With KubeVersion specified
exec holos compare yaml deploy/components/kubeversion1/kubeversion1.gen.yaml want/with-kubeversion-specified.yaml
# With both APIVersions and KubeVersion specified
exec holos compare yaml deploy/components/kubeversion2/kubeversion2.gen.yaml want/with-both-specified.yaml
-- want/with-both-specified.yaml --
apiVersion: v1
kind: Service
metadata:
  annotations:
    kubeVersion: v1.20.0
  name: has-foo-v1
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
-- want/with-kubeversion-specified.yaml --
apiVersion: v1
kind: Service
metadata:
  annotations:
    kubeVersion: v1.20.0
  name: has-foo-v1beta1
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
-- want/when-no-capabilities-specified.yaml --
apiVersion: v1
kind: Service
metadata:
  annotations:
    kubeVersion: v1.99.0
  name: has-foo-v1beta1
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
-- want/with-capabilities-specified.yaml --
apiVersion: v1
kind: Service
metadata:
  annotations:
    kubeVersion: v1.99.0
  name: has-foo-v1
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
-- platform/capabilities.cue --
package holos

import "encoding/json"

Platform: Components: capabilities: {
        name: "capabilities"
        path: "components/capabilities"
}
Platform: Components: specified: {
        name: "specified"
        path: "components/capabilities"
        parameters: apiVersions: json.Marshal(["foo/v1","bar/v1"])
}
Platform: Components: kubeversion1: {
        name: "kubeversion1"
        path: "components/capabilities"
        parameters: kubeVersion: "v1.20.0"
}
Platform: Components: kubeversion2: {
        name: "kubeversion2"
        path: "components/capabilities"
        parameters: kubeVersion: "v1.20.0"
        parameters: apiVersions: json.Marshal(["foo/v1","bar/v1"])
}
-- components/capabilities/capabilities.cue --
package holos

import "encoding/json"

holos: Component.BuildPlan

Component: #Helm & {
        Name: string @tag(holos_component_name, type=string)
        Chart: name: "capabilities"
        Chart: version: "0.1.0"
        _APIVersions: string | *"[]" @tag(apiVersions, type=string)
        APIVersions: json.Unmarshal(_APIVersions)
        KubeVersion: string | *"v1.99.0" @tag(kubeVersion, type=string)
}
-- components/capabilities/vendor/0.1.0/capabilities/Chart.yaml --
apiVersion: v2
name: capabilities
description: A Helm chart for Kubernetes
type: application
version: 0.1.0
appVersion: "1.16.0"
-- components/capabilities/vendor/0.1.0/capabilities/templates/service.yaml --
apiVersion: v1
kind: Service
metadata:
{{- if .Capabilities.APIVersions.Has "foo/v1" }}
  name: has-foo-v1
{{- else }}
  name: has-foo-v1beta1
{{- end }}
  annotations:
    kubeVersion: {{ .Capabilities.KubeVersion }}
spec:
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
-- want/helm-template.yaml --
---
# Source: capabilities/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: has-foo-v1beta1
  annotations:
    kubeVersion: v1.99.0
spec:
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
